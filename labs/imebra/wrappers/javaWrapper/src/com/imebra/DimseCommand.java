/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.imebra;

public class DimseCommand extends DimseCommandBase {
  private transient long swigCPtr;

  protected DimseCommand(long cPtr, boolean cMemoryOwn) {
    super(imebraJNI.DimseCommand_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(DimseCommand obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        imebraJNI.delete_DimseCommand(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public int getID() {
    return imebraJNI.DimseCommand_getID(swigCPtr, this);
  }

  public dimseCommandType_t getCommandType() {
    return dimseCommandType_t.swigToEnum(imebraJNI.DimseCommand_getCommandType(swigCPtr, this));
  }

  public CStoreCommand getAsCStoreCommand() {
    long cPtr = imebraJNI.DimseCommand_getAsCStoreCommand(swigCPtr, this);
    return (cPtr == 0) ? null : new CStoreCommand(cPtr, true);
  }

  public CMoveCommand getAsCMoveCommand() {
    long cPtr = imebraJNI.DimseCommand_getAsCMoveCommand(swigCPtr, this);
    return (cPtr == 0) ? null : new CMoveCommand(cPtr, true);
  }

  public CGetCommand getAsCGetCommand() {
    long cPtr = imebraJNI.DimseCommand_getAsCGetCommand(swigCPtr, this);
    return (cPtr == 0) ? null : new CGetCommand(cPtr, true);
  }

  public CFindCommand getAsCFindCommand() {
    long cPtr = imebraJNI.DimseCommand_getAsCFindCommand(swigCPtr, this);
    return (cPtr == 0) ? null : new CFindCommand(cPtr, true);
  }

  public CEchoCommand getAsCEchoCommand() {
    long cPtr = imebraJNI.DimseCommand_getAsCEchoCommand(swigCPtr, this);
    return (cPtr == 0) ? null : new CEchoCommand(cPtr, true);
  }

  public CCancelCommand getAsCCancelCommand() {
    long cPtr = imebraJNI.DimseCommand_getAsCCancelCommand(swigCPtr, this);
    return (cPtr == 0) ? null : new CCancelCommand(cPtr, true);
  }

  public NActionCommand getAsNActionCommand() {
    long cPtr = imebraJNI.DimseCommand_getAsNActionCommand(swigCPtr, this);
    return (cPtr == 0) ? null : new NActionCommand(cPtr, true);
  }

  public NEventReportCommand getAsNEventReportCommand() {
    long cPtr = imebraJNI.DimseCommand_getAsNEventReportCommand(swigCPtr, this);
    return (cPtr == 0) ? null : new NEventReportCommand(cPtr, true);
  }

  public NCreateCommand getAsNCreateCommand() {
    long cPtr = imebraJNI.DimseCommand_getAsNCreateCommand(swigCPtr, this);
    return (cPtr == 0) ? null : new NCreateCommand(cPtr, true);
  }

  public NDeleteCommand getAsNDeleteCommand() {
    long cPtr = imebraJNI.DimseCommand_getAsNDeleteCommand(swigCPtr, this);
    return (cPtr == 0) ? null : new NDeleteCommand(cPtr, true);
  }

  public NSetCommand getAsNSetCommand() {
    long cPtr = imebraJNI.DimseCommand_getAsNSetCommand(swigCPtr, this);
    return (cPtr == 0) ? null : new NSetCommand(cPtr, true);
  }

  public NGetCommand getAsNGetCommand() {
    long cPtr = imebraJNI.DimseCommand_getAsNGetCommand(swigCPtr, this);
    return (cPtr == 0) ? null : new NGetCommand(cPtr, true);
  }

}
