/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




#if defined(SWIG_NOINCLUDE) || defined(SWIG_NOARRAYS)


static int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input);
static void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input);
static jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz);


static int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input);
static void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input);
static jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz);


static int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input);
static void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input);
static jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz);


static int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input);
static void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input);
static jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz);


static int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input);
static void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input);
static jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz);


static int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input);
static void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input);
static jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz);


static int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input);
static void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz);


static int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input);
static void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input);
static jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz);


static int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input);
static void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz);


static int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input);
static void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz);


static int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input);
static void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input);
static jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz);


static int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input);
static void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input);
static jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz);


#else


/* bool[] support */
static int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetBooleanArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new bool[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = ((*jarr)[i] != 0);
  return 1;
}

static void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jboolean)carr[i];
  jenv->ReleaseBooleanArrayElements(input, jarr, 0);
}

static jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz) {
  jboolean *arr;
  int i;
  jbooleanArray jresult = jenv->NewBooleanArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetBooleanArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jboolean)result[i];
  jenv->ReleaseBooleanArrayElements(jresult, arr, 0);
  return jresult;
}


/* signed char[] support */
static int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetByteArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new signed char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (signed char)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jbyte)carr[i];
  jenv->ReleaseByteArrayElements(input, jarr, 0);
}

static jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz) {
  jbyte *arr;
  int i;
  jbyteArray jresult = jenv->NewByteArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetByteArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jbyte)result[i];
  jenv->ReleaseByteArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned char[] support */
static int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned char)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

static jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* short[] support */
static int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (short)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

static jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned short[] support */
static int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned short)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* int[] support */
static int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (int)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned int[] support */
static int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned int)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* long[] support */
static int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (long)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned long[] support */
static int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned long)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* jlong[] support */
static int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new jlong[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (jlong)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* float[] support */
static int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetFloatArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new float[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (float)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jfloat)carr[i];
  jenv->ReleaseFloatArrayElements(input, jarr, 0);
}

static jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz) {
  jfloat *arr;
  int i;
  jfloatArray jresult = jenv->NewFloatArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetFloatArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jfloat)result[i];
  jenv->ReleaseFloatArrayElements(jresult, arr, 0);
  return jresult;
}


/* double[] support */
static int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetDoubleArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new double[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (double)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jdouble)carr[i];
  jenv->ReleaseDoubleArrayElements(input, jarr, 0);
}

static jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz) {
  jdouble *arr;
  int i;
  jdoubleArray jresult = jenv->NewDoubleArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetDoubleArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jdouble)result[i];
  jenv->ReleaseDoubleArrayElements(jresult, arr, 0);
  return jresult;
}


#endif



#include <imebra/imebra.h>



#include <typeinfo>
#include <stdexcept>


#include <string>


#include <vector>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


SWIGINTERN void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}


#include <typeinfo>
#include <stdexcept>


#include <utility>


#include <stdint.h>		// Use the C99 official header

SWIGINTERN std::vector< std::string >::const_reference std_vector_Sl_std_string_Sg__get(std::vector< std::string > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_string_Sg__set(std::vector< std::string > *self,int i,std::vector< std::string >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< unsigned short >::const_reference std_vector_Sl_std_uint16_t_Sg__get(std::vector< std::uint16_t > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_uint16_t_Sg__set(std::vector< std::uint16_t > *self,int i,std::vector< unsigned short >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< imebra::TagId >::const_reference std_vector_Sl_imebra_TagId_Sg__get(std::vector< imebra::TagId > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_imebra_TagId_Sg__set(std::vector< imebra::TagId > *self,int i,std::vector< imebra::TagId >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< imebra::VOIDescription >::const_reference std_vector_Sl_imebra_VOIDescription_Sg__get(std::vector< imebra::VOIDescription > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_imebra_VOIDescription_Sg__set(std::vector< imebra::VOIDescription > *self,int i,std::vector< imebra::VOIDescription >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN imebra::StreamWriter *new_imebra_StreamWriter__SWIG_2(imebra::TCPStream const &stream){
        return new imebra::StreamWriter(stream);
    }
SWIGINTERN imebra::StreamWriter *new_imebra_StreamWriter__SWIG_3(imebra::Pipe const &stream){
        return new imebra::StreamWriter(stream);
    }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1FileParts_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::string > *)new std::vector< std::string >();
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1FileParts_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::string >::size_type)jarg1; 
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_FileParts_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = ((std::vector< std::string > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_FileParts_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = ((std::vector< std::string > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_FileParts_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_imebra_imebraJNI_FileParts_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_FileParts_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_FileParts_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::vector< std::string >::value_type arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_FileParts_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_FileParts_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::vector< std::string >::value_type arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    std_vector_Sl_std_string_Sg__set(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1FileParts(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1Groups_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::uint16_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::uint16_t > *)new std::vector< std::uint16_t >();
  *(std::vector< std::uint16_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1Groups_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< unsigned short >::size_type arg1 ;
  std::vector< std::uint16_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< unsigned short >::size_type)jarg1; 
  result = (std::vector< std::uint16_t > *)new std::vector< std::uint16_t >(arg1);
  *(std::vector< std::uint16_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_Groups_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::uint16_t > *arg1 = (std::vector< std::uint16_t > *) 0 ;
  std::vector< unsigned short >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::uint16_t > **)&jarg1; 
  result = ((std::vector< std::uint16_t > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_Groups_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::uint16_t > *arg1 = (std::vector< std::uint16_t > *) 0 ;
  std::vector< unsigned short >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::uint16_t > **)&jarg1; 
  result = ((std::vector< std::uint16_t > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_Groups_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::uint16_t > *arg1 = (std::vector< std::uint16_t > *) 0 ;
  std::vector< unsigned short >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::uint16_t > **)&jarg1; 
  arg2 = (std::vector< unsigned short >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_imebra_imebraJNI_Groups_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::uint16_t > *arg1 = (std::vector< std::uint16_t > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::uint16_t > **)&jarg1; 
  result = (bool)((std::vector< std::uint16_t > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_Groups_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::uint16_t > *arg1 = (std::vector< std::uint16_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::uint16_t > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_Groups_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< std::uint16_t > *arg1 = (std::vector< std::uint16_t > *) 0 ;
  std::vector< unsigned short >::value_type *arg2 = 0 ;
  std::vector< unsigned short >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::uint16_t > **)&jarg1; 
  temp2 = (std::vector< unsigned short >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< unsigned short >::value_type const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_Groups_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< std::uint16_t > *arg1 = (std::vector< std::uint16_t > *) 0 ;
  int arg2 ;
  std::vector< unsigned short >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::uint16_t > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< unsigned short >::value_type *) &std_vector_Sl_std_uint16_t_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_Groups_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< std::uint16_t > *arg1 = (std::vector< std::uint16_t > *) 0 ;
  int arg2 ;
  std::vector< unsigned short >::value_type *arg3 = 0 ;
  std::vector< unsigned short >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::uint16_t > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< unsigned short >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_std_uint16_t_Sg__set(arg1,arg2,(unsigned short const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1Groups(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::uint16_t > *arg1 = (std::vector< std::uint16_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::uint16_t > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1TagsIds_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< imebra::TagId > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< imebra::TagId > *)new std::vector< imebra::TagId >();
  *(std::vector< imebra::TagId > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1TagsIds_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< imebra::TagId >::size_type arg1 ;
  std::vector< imebra::TagId > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< imebra::TagId >::size_type)jarg1; 
  result = (std::vector< imebra::TagId > *)new std::vector< imebra::TagId >(arg1);
  *(std::vector< imebra::TagId > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_TagsIds_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< imebra::TagId > *arg1 = (std::vector< imebra::TagId > *) 0 ;
  std::vector< imebra::TagId >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< imebra::TagId > **)&jarg1; 
  result = ((std::vector< imebra::TagId > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_TagsIds_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< imebra::TagId > *arg1 = (std::vector< imebra::TagId > *) 0 ;
  std::vector< imebra::TagId >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< imebra::TagId > **)&jarg1; 
  result = ((std::vector< imebra::TagId > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_TagsIds_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< imebra::TagId > *arg1 = (std::vector< imebra::TagId > *) 0 ;
  std::vector< imebra::TagId >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< imebra::TagId > **)&jarg1; 
  arg2 = (std::vector< imebra::TagId >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_imebra_imebraJNI_TagsIds_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< imebra::TagId > *arg1 = (std::vector< imebra::TagId > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< imebra::TagId > **)&jarg1; 
  result = (bool)((std::vector< imebra::TagId > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_TagsIds_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< imebra::TagId > *arg1 = (std::vector< imebra::TagId > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< imebra::TagId > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_TagsIds_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< imebra::TagId > *arg1 = (std::vector< imebra::TagId > *) 0 ;
  std::vector< imebra::TagId >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< imebra::TagId > **)&jarg1; 
  arg2 = *(std::vector< imebra::TagId >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< imebra::TagId >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< imebra::TagId >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_TagsIds_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< imebra::TagId > *arg1 = (std::vector< imebra::TagId > *) 0 ;
  int arg2 ;
  std::vector< imebra::TagId >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< imebra::TagId > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< imebra::TagId >::value_type *) &std_vector_Sl_imebra_TagId_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< imebra::TagId >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_TagsIds_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< imebra::TagId > *arg1 = (std::vector< imebra::TagId > *) 0 ;
  int arg2 ;
  std::vector< imebra::TagId >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< imebra::TagId > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< imebra::TagId >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< imebra::TagId >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_imebra_TagId_Sg__set(arg1,arg2,(imebra::TagId const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1TagsIds(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< imebra::TagId > *arg1 = (std::vector< imebra::TagId > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< imebra::TagId > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1VOIs_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< imebra::VOIDescription > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< imebra::VOIDescription > *)new std::vector< imebra::VOIDescription >();
  *(std::vector< imebra::VOIDescription > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1VOIs_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< imebra::VOIDescription >::size_type arg1 ;
  std::vector< imebra::VOIDescription > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< imebra::VOIDescription >::size_type)jarg1; 
  result = (std::vector< imebra::VOIDescription > *)new std::vector< imebra::VOIDescription >(arg1);
  *(std::vector< imebra::VOIDescription > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_VOIs_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< imebra::VOIDescription > *arg1 = (std::vector< imebra::VOIDescription > *) 0 ;
  std::vector< imebra::VOIDescription >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< imebra::VOIDescription > **)&jarg1; 
  result = ((std::vector< imebra::VOIDescription > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_VOIs_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< imebra::VOIDescription > *arg1 = (std::vector< imebra::VOIDescription > *) 0 ;
  std::vector< imebra::VOIDescription >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< imebra::VOIDescription > **)&jarg1; 
  result = ((std::vector< imebra::VOIDescription > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_VOIs_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< imebra::VOIDescription > *arg1 = (std::vector< imebra::VOIDescription > *) 0 ;
  std::vector< imebra::VOIDescription >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< imebra::VOIDescription > **)&jarg1; 
  arg2 = (std::vector< imebra::VOIDescription >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_imebra_imebraJNI_VOIs_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< imebra::VOIDescription > *arg1 = (std::vector< imebra::VOIDescription > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< imebra::VOIDescription > **)&jarg1; 
  result = (bool)((std::vector< imebra::VOIDescription > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_VOIs_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< imebra::VOIDescription > *arg1 = (std::vector< imebra::VOIDescription > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< imebra::VOIDescription > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_VOIs_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< imebra::VOIDescription > *arg1 = (std::vector< imebra::VOIDescription > *) 0 ;
  std::vector< imebra::VOIDescription >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< imebra::VOIDescription > **)&jarg1; 
  arg2 = *(std::vector< imebra::VOIDescription >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< imebra::VOIDescription >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< imebra::VOIDescription >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_VOIs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< imebra::VOIDescription > *arg1 = (std::vector< imebra::VOIDescription > *) 0 ;
  int arg2 ;
  std::vector< imebra::VOIDescription >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< imebra::VOIDescription > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< imebra::VOIDescription >::value_type *) &std_vector_Sl_imebra_VOIDescription_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< imebra::VOIDescription >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_VOIs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< imebra::VOIDescription > *arg1 = (std::vector< imebra::VOIDescription > *) 0 ;
  int arg2 ;
  std::vector< imebra::VOIDescription >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< imebra::VOIDescription > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< imebra::VOIDescription >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< imebra::VOIDescription >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_imebra_VOIDescription_Sg__set(arg1,arg2,(imebra::VOIDescription const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1VOIs(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< imebra::VOIDescription > *arg1 = (std::vector< imebra::VOIDescription > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< imebra::VOIDescription > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1TagId_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imebra::TagId *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::TagId *)new imebra::TagId();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::TagId **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1TagId_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  std::uint16_t arg1 ;
  std::uint16_t arg2 ;
  imebra::TagId *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::uint16_t)jarg1; 
  arg2 = (std::uint16_t)jarg2; 
  {
    try {
      result = (imebra::TagId *)new imebra::TagId(arg1,arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::TagId **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1TagId_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jint jarg3) {
  jlong jresult = 0 ;
  std::uint16_t arg1 ;
  std::uint32_t arg2 ;
  std::uint16_t arg3 ;
  imebra::TagId *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::uint16_t)jarg1; 
  arg2 = (std::uint32_t)jarg2; 
  arg3 = (std::uint16_t)jarg3; 
  {
    try {
      result = (imebra::TagId *)new imebra::TagId(arg1,arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::TagId **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1TagId(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::TagId *arg1 = (imebra::TagId *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::TagId **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_TagId_1getGroupId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imebra::TagId *arg1 = (imebra::TagId *) 0 ;
  std::uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::TagId **)&jarg1; 
  {
    try {
      result = (std::uint16_t)((imebra::TagId const *)arg1)->getGroupId();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_TagId_1getGroupOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::TagId *arg1 = (imebra::TagId *) 0 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::TagId **)&jarg1; 
  {
    try {
      result = (std::uint32_t)((imebra::TagId const *)arg1)->getGroupOrder();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_TagId_1getTagId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imebra::TagId *arg1 = (imebra::TagId *) 0 ;
  std::uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::TagId **)&jarg1; 
  {
    try {
      result = (std::uint16_t)((imebra::TagId const *)arg1)->getTagId();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_ageUnit_1t_1days_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::ageUnit_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::ageUnit_t)imebra::ageUnit_t::days;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_ageUnit_1t_1weeks_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::ageUnit_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::ageUnit_t)imebra::ageUnit_t::weeks;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_ageUnit_1t_1months_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::ageUnit_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::ageUnit_t)imebra::ageUnit_t::months;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_ageUnit_1t_1years_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::ageUnit_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::ageUnit_t)imebra::ageUnit_t::years;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_imageQuality_1t_1veryHigh_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::imageQuality_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::imageQuality_t)imebra::imageQuality_t::veryHigh;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_imageQuality_1t_1high_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::imageQuality_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::imageQuality_t)imebra::imageQuality_t::high;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_imageQuality_1t_1aboveMedium_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::imageQuality_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::imageQuality_t)imebra::imageQuality_t::aboveMedium;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_imageQuality_1t_1medium_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::imageQuality_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::imageQuality_t)imebra::imageQuality_t::medium;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_imageQuality_1t_1belowMedium_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::imageQuality_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::imageQuality_t)imebra::imageQuality_t::belowMedium;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_imageQuality_1t_1low_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::imageQuality_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::imageQuality_t)imebra::imageQuality_t::low;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_imageQuality_1t_1veryLow_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::imageQuality_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::imageQuality_t)imebra::imageQuality_t::veryLow;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_bitDepth_1t_1depthU8_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::bitDepth_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::bitDepth_t)imebra::bitDepth_t::depthU8;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_bitDepth_1t_1depthS8_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::bitDepth_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::bitDepth_t)imebra::bitDepth_t::depthS8;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_bitDepth_1t_1depthU16_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::bitDepth_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::bitDepth_t)imebra::bitDepth_t::depthU16;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_bitDepth_1t_1depthS16_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::bitDepth_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::bitDepth_t)imebra::bitDepth_t::depthS16;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_bitDepth_1t_1depthU32_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::bitDepth_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::bitDepth_t)imebra::bitDepth_t::depthU32;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_bitDepth_1t_1depthS32_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::bitDepth_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::bitDepth_t)imebra::bitDepth_t::depthS32;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_tagVR_1t_1AE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::tagVR_t)imebra::tagVR_t::AE;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_tagVR_1t_1AS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::tagVR_t)imebra::tagVR_t::AS;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_tagVR_1t_1AT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::tagVR_t)imebra::tagVR_t::AT;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_tagVR_1t_1CS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::tagVR_t)imebra::tagVR_t::CS;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_tagVR_1t_1DA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::tagVR_t)imebra::tagVR_t::DA;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_tagVR_1t_1DS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::tagVR_t)imebra::tagVR_t::DS;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_tagVR_1t_1DT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::tagVR_t)imebra::tagVR_t::DT;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_tagVR_1t_1FL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::tagVR_t)imebra::tagVR_t::FL;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_tagVR_1t_1FD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::tagVR_t)imebra::tagVR_t::FD;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_tagVR_1t_1IS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::tagVR_t)imebra::tagVR_t::IS;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_tagVR_1t_1LO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::tagVR_t)imebra::tagVR_t::LO;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_tagVR_1t_1LT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::tagVR_t)imebra::tagVR_t::LT;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_tagVR_1t_1OB_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::tagVR_t)imebra::tagVR_t::OB;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_tagVR_1t_1SB_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::tagVR_t)imebra::tagVR_t::SB;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_tagVR_1t_1OD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::tagVR_t)imebra::tagVR_t::OD;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_tagVR_1t_1OF_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::tagVR_t)imebra::tagVR_t::OF;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_tagVR_1t_1OL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::tagVR_t)imebra::tagVR_t::OL;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_tagVR_1t_1OW_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::tagVR_t)imebra::tagVR_t::OW;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_tagVR_1t_1PN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::tagVR_t)imebra::tagVR_t::PN;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_tagVR_1t_1SH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::tagVR_t)imebra::tagVR_t::SH;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_tagVR_1t_1SL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::tagVR_t)imebra::tagVR_t::SL;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_tagVR_1t_1SQ_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::tagVR_t)imebra::tagVR_t::SQ;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_tagVR_1t_1SS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::tagVR_t)imebra::tagVR_t::SS;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_tagVR_1t_1ST_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::tagVR_t)imebra::tagVR_t::ST;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_tagVR_1t_1TM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::tagVR_t)imebra::tagVR_t::TM;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_tagVR_1t_1UC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::tagVR_t)imebra::tagVR_t::UC;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_tagVR_1t_1UI_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::tagVR_t)imebra::tagVR_t::UI;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_tagVR_1t_1UL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::tagVR_t)imebra::tagVR_t::UL;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_tagVR_1t_1UN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::tagVR_t)imebra::tagVR_t::UN;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_tagVR_1t_1UR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::tagVR_t)imebra::tagVR_t::UR;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_tagVR_1t_1US_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::tagVR_t)imebra::tagVR_t::US;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_tagVR_1t_1UT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::tagVR_t)imebra::tagVR_t::UT;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_drawBitmapType_1t_1drawBitmapRGB_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::drawBitmapType_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::drawBitmapType_t)imebra::drawBitmapType_t::drawBitmapRGB;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_drawBitmapType_1t_1drawBitmapBGR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::drawBitmapType_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::drawBitmapType_t)imebra::drawBitmapType_t::drawBitmapBGR;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_drawBitmapType_1t_1drawBitmapRGBA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::drawBitmapType_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::drawBitmapType_t)imebra::drawBitmapType_t::drawBitmapRGBA;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_drawBitmapType_1t_1drawBitmapBGRA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::drawBitmapType_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::drawBitmapType_t)imebra::drawBitmapType_t::drawBitmapBGRA;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1Age(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  std::uint32_t arg1 ;
  imebra::ageUnit_t arg2 ;
  imebra::Age *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::uint32_t)jarg1; 
  arg2 = (imebra::ageUnit_t)jarg2; 
  {
    try {
      result = (imebra::Age *)new imebra::Age(arg1,arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::Age **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_imebra_imebraJNI_Age_1years(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  imebra::Age *arg1 = (imebra::Age *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Age **)&jarg1; 
  {
    try {
      result = (double)((imebra::Age const *)arg1)->years();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_Age_1age_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  imebra::Age *arg1 = (imebra::Age *) 0 ;
  std::uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Age **)&jarg1; 
  arg2 = (std::uint32_t)jarg2; 
  if (arg1) (arg1)->age = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_Age_1age_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::Age *arg1 = (imebra::Age *) 0 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Age **)&jarg1; 
  result = (std::uint32_t) ((arg1)->age);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_Age_1units_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  imebra::Age *arg1 = (imebra::Age *) 0 ;
  imebra::ageUnit_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Age **)&jarg1; 
  arg2 = (imebra::ageUnit_t)jarg2; 
  if (arg1) (arg1)->units = arg2;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_Age_1units_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imebra::Age *arg1 = (imebra::Age *) 0 ;
  imebra::ageUnit_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Age **)&jarg1; 
  result = (imebra::ageUnit_t) ((arg1)->units);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1Age(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::Age *arg1 = (imebra::Age *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::Age **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1Date(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7, jint jarg8, jint jarg9) {
  jlong jresult = 0 ;
  std::uint32_t arg1 ;
  std::uint32_t arg2 ;
  std::uint32_t arg3 ;
  std::uint32_t arg4 ;
  std::uint32_t arg5 ;
  std::uint32_t arg6 ;
  std::uint32_t arg7 ;
  std::int32_t arg8 ;
  std::int32_t arg9 ;
  imebra::Date *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::uint32_t)jarg1; 
  arg2 = (std::uint32_t)jarg2; 
  arg3 = (std::uint32_t)jarg3; 
  arg4 = (std::uint32_t)jarg4; 
  arg5 = (std::uint32_t)jarg5; 
  arg6 = (std::uint32_t)jarg6; 
  arg7 = (std::uint32_t)jarg7; 
  arg8 = (std::int32_t)jarg8; 
  arg9 = (std::int32_t)jarg9; 
  {
    try {
      result = (imebra::Date *)new imebra::Date(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::Date **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_Date_1year_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  imebra::Date *arg1 = (imebra::Date *) 0 ;
  std::uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Date **)&jarg1; 
  arg2 = (std::uint32_t)jarg2; 
  if (arg1) (arg1)->year = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_Date_1year_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::Date *arg1 = (imebra::Date *) 0 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Date **)&jarg1; 
  result = (std::uint32_t) ((arg1)->year);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_Date_1month_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  imebra::Date *arg1 = (imebra::Date *) 0 ;
  std::uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Date **)&jarg1; 
  arg2 = (std::uint32_t)jarg2; 
  if (arg1) (arg1)->month = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_Date_1month_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::Date *arg1 = (imebra::Date *) 0 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Date **)&jarg1; 
  result = (std::uint32_t) ((arg1)->month);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_Date_1day_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  imebra::Date *arg1 = (imebra::Date *) 0 ;
  std::uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Date **)&jarg1; 
  arg2 = (std::uint32_t)jarg2; 
  if (arg1) (arg1)->day = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_Date_1day_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::Date *arg1 = (imebra::Date *) 0 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Date **)&jarg1; 
  result = (std::uint32_t) ((arg1)->day);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_Date_1hour_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  imebra::Date *arg1 = (imebra::Date *) 0 ;
  std::uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Date **)&jarg1; 
  arg2 = (std::uint32_t)jarg2; 
  if (arg1) (arg1)->hour = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_Date_1hour_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::Date *arg1 = (imebra::Date *) 0 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Date **)&jarg1; 
  result = (std::uint32_t) ((arg1)->hour);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_Date_1minutes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  imebra::Date *arg1 = (imebra::Date *) 0 ;
  std::uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Date **)&jarg1; 
  arg2 = (std::uint32_t)jarg2; 
  if (arg1) (arg1)->minutes = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_Date_1minutes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::Date *arg1 = (imebra::Date *) 0 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Date **)&jarg1; 
  result = (std::uint32_t) ((arg1)->minutes);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_Date_1seconds_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  imebra::Date *arg1 = (imebra::Date *) 0 ;
  std::uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Date **)&jarg1; 
  arg2 = (std::uint32_t)jarg2; 
  if (arg1) (arg1)->seconds = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_Date_1seconds_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::Date *arg1 = (imebra::Date *) 0 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Date **)&jarg1; 
  result = (std::uint32_t) ((arg1)->seconds);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_Date_1nanoseconds_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  imebra::Date *arg1 = (imebra::Date *) 0 ;
  std::uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Date **)&jarg1; 
  arg2 = (std::uint32_t)jarg2; 
  if (arg1) (arg1)->nanoseconds = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_Date_1nanoseconds_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::Date *arg1 = (imebra::Date *) 0 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Date **)&jarg1; 
  result = (std::uint32_t) ((arg1)->nanoseconds);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_Date_1offsetHours_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  imebra::Date *arg1 = (imebra::Date *) 0 ;
  std::int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Date **)&jarg1; 
  arg2 = (std::int32_t)jarg2; 
  if (arg1) (arg1)->offsetHours = arg2;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_Date_1offsetHours_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imebra::Date *arg1 = (imebra::Date *) 0 ;
  std::int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Date **)&jarg1; 
  result = (std::int32_t) ((arg1)->offsetHours);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_Date_1offsetMinutes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  imebra::Date *arg1 = (imebra::Date *) 0 ;
  std::int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Date **)&jarg1; 
  arg2 = (std::int32_t)jarg2; 
  if (arg1) (arg1)->offsetMinutes = arg2;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_Date_1offsetMinutes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imebra::Date *arg1 = (imebra::Date *) 0 ;
  std::int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Date **)&jarg1; 
  result = (std::int32_t) ((arg1)->offsetMinutes);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1Date(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::Date *arg1 = (imebra::Date *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::Date **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_VOIDescription_1center_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  imebra::VOIDescription *arg1 = (imebra::VOIDescription *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::VOIDescription **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->center = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_imebra_imebraJNI_VOIDescription_1center_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  imebra::VOIDescription *arg1 = (imebra::VOIDescription *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::VOIDescription **)&jarg1; 
  result = (double) ((arg1)->center);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_VOIDescription_1width_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  imebra::VOIDescription *arg1 = (imebra::VOIDescription *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::VOIDescription **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->width = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_imebra_imebraJNI_VOIDescription_1width_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  imebra::VOIDescription *arg1 = (imebra::VOIDescription *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::VOIDescription **)&jarg1; 
  result = (double) ((arg1)->width);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_VOIDescription_1description_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  imebra::VOIDescription *arg1 = (imebra::VOIDescription *) 0 ;
  std::wstring arg2 ;
  std::wstring *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::VOIDescription **)&jarg1; 
  argp2 = *(std::wstring **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::wstring");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->description = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_VOIDescription_1description_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::VOIDescription *arg1 = (imebra::VOIDescription *) 0 ;
  std::wstring result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::VOIDescription **)&jarg1; 
  result =  ((arg1)->description);
  *(std::wstring **)&jresult = new std::wstring((const std::wstring &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1VOIDescription(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imebra::VOIDescription *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::VOIDescription *)new imebra::VOIDescription();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::VOIDescription **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1VOIDescription(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::VOIDescription *arg1 = (imebra::VOIDescription *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::VOIDescription **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseCommandType_1t_1cStore_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseCommandType_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseCommandType_t)imebra::dimseCommandType_t::cStore;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseCommandType_1t_1cGet_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseCommandType_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseCommandType_t)imebra::dimseCommandType_t::cGet;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseCommandType_1t_1cFind_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseCommandType_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseCommandType_t)imebra::dimseCommandType_t::cFind;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseCommandType_1t_1cMove_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseCommandType_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseCommandType_t)imebra::dimseCommandType_t::cMove;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseCommandType_1t_1cCancel_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseCommandType_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseCommandType_t)imebra::dimseCommandType_t::cCancel;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseCommandType_1t_1cEcho_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseCommandType_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseCommandType_t)imebra::dimseCommandType_t::cEcho;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseCommandType_1t_1nEventReport_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseCommandType_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseCommandType_t)imebra::dimseCommandType_t::nEventReport;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseCommandType_1t_1nGet_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseCommandType_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseCommandType_t)imebra::dimseCommandType_t::nGet;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseCommandType_1t_1nSet_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseCommandType_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseCommandType_t)imebra::dimseCommandType_t::nSet;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseCommandType_1t_1nAction_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseCommandType_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseCommandType_t)imebra::dimseCommandType_t::nAction;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseCommandType_1t_1nCreate_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseCommandType_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseCommandType_t)imebra::dimseCommandType_t::nCreate;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseCommandType_1t_1nDelete_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseCommandType_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseCommandType_t)imebra::dimseCommandType_t::nDelete;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseCommandType_1t_1response_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseCommandType_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseCommandType_t)imebra::dimseCommandType_t::response;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseCommandPriority_1t_1low_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseCommandPriority_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseCommandPriority_t)imebra::dimseCommandPriority_t::low;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseCommandPriority_1t_1medium_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseCommandPriority_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseCommandPriority_t)imebra::dimseCommandPriority_t::medium;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseCommandPriority_1t_1high_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseCommandPriority_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseCommandPriority_t)imebra::dimseCommandPriority_t::high;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1success_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::success;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1unsupportedOptionalAttributes_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::unsupportedOptionalAttributes;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1cannotUpdateperformedProcedureStepObject_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::cannotUpdateperformedProcedureStepObject;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1unsupportedSOPClass_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::unsupportedSOPClass;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1outOfResources_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::outOfResources;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1outOfResourcesCannotCalculateNumberOfMatches_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::outOfResourcesCannotCalculateNumberOfMatches;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1outOfResourcesCannotPerformSubOperations_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::outOfResourcesCannotPerformSubOperations;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1moveDestinationUnknown_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::moveDestinationUnknown;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1identifierDoesNotMatchSOPClass_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::identifierDoesNotMatchSOPClass;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1subOperationCompletedWithErrors_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::subOperationCompletedWithErrors;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1elementDiscarded_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::elementDiscarded;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1datasetDoesNotMatchSOPClass_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::datasetDoesNotMatchSOPClass;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1UPSAlreadyCanceled_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::UPSAlreadyCanceled;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1coercedInvalidValuesToValidValues_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::coercedInvalidValuesToValidValues;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1UPSStateAlreadyCompleted_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::UPSStateAlreadyCompleted;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1unableToProcess_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::unableToProcess;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1moreThanOneMatchFound_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::moreThanOneMatchFound;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1CannotSupportRequestedTemplate_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::CannotSupportRequestedTemplate;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1UPSNotUpdated_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::UPSNotUpdated;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1transactionUIDNotProvided_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::transactionUIDNotProvided;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1UPSAlreadyInProgress_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::UPSAlreadyInProgress;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1canScheduleOnlyWithNCreate_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::canScheduleOnlyWithNCreate;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1UPSCannotChangeState_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::UPSCannotChangeState;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1instanceUIDDoesNotExist_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::instanceUIDDoesNotExist;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1unknownAETitle_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::unknownAETitle;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1UPSNotSchedule_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::UPSNotSchedule;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1UPSNotInProgress_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::UPSNotInProgress;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1UPSAlreadyCompleted_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::UPSAlreadyCompleted;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1performerCannotBeContacted_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::performerCannotBeContacted;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1performerDoesNotCancel_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::performerDoesNotCancel;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1unappropriateActionForInstance_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::unappropriateActionForInstance;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1SCPDoesNotSupportEventReports_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::SCPDoesNotSupportEventReports;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1canceled_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::canceled;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1pending_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::pending;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1pendingWithWarnings_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::pendingWithWarnings;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1ReadMemory_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imebra::ReadMemory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::ReadMemory *)new imebra::ReadMemory();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::ReadMemory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1ReadMemory_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jbyteArray jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  imebra::ReadMemory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    if (jarg1) {
      arg1 = (char *) jenv->GetByteArrayElements(jarg1, 0);
      arg2 = (size_t) jenv->GetArrayLength(jarg1);
    } else {
      arg1 = 0;
      arg2 = 0;
    }
  }
  {
    try {
      result = (imebra::ReadMemory *)new imebra::ReadMemory((char const *)arg1,arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::ReadMemory **)&jresult = result; 
  {
    if (jarg1) jenv->ReleaseByteArrayElements(jarg1, (jbyte *)arg1, 0);
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1ReadMemory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::ReadMemory *arg1 = (imebra::ReadMemory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::ReadMemory **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_ReadMemory_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::ReadMemory *arg1 = (imebra::ReadMemory *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::ReadMemory **)&jarg1; 
  {
    try {
      result = ((imebra::ReadMemory const *)arg1)->size();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_ReadMemory_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  jlong jresult = 0 ;
  imebra::ReadMemory *arg1 = (imebra::ReadMemory *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::ReadMemory **)&jarg1; 
  {
    if (jarg2) {
      arg2 = (char *) jenv->GetByteArrayElements(jarg2, 0);
      arg3 = (size_t) jenv->GetArrayLength(jarg2);
    } else {
      arg2 = 0;
      arg3 = 0;
    }
  }
  {
    try {
      result = ((imebra::ReadMemory const *)arg1)->data(arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  {
    if (jarg2) jenv->ReleaseByteArrayElements(jarg2, (jbyte *)arg2, 0);
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_ReadMemory_1regionData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jlong jarg4) {
  imebra::ReadMemory *arg1 = (imebra::ReadMemory *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  size_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::ReadMemory **)&jarg1; 
  {
    if (jarg2) {
      arg2 = (char *) jenv->GetByteArrayElements(jarg2, 0);
      arg3 = (size_t) jenv->GetArrayLength(jarg2);
    } else {
      arg2 = 0;
      arg3 = 0;
    }
  }
  arg4 = (size_t)jarg4; 
  {
    try {
      ((imebra::ReadMemory const *)arg1)->regionData(arg2,arg3,arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
  {
    if (jarg2) jenv->ReleaseByteArrayElements(jarg2, (jbyte *)arg2, 0);
  }
  
}


SWIGEXPORT jboolean JNICALL Java_com_imebra_imebraJNI_ReadMemory_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  imebra::ReadMemory *arg1 = (imebra::ReadMemory *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::ReadMemory **)&jarg1; 
  {
    try {
      result = (bool)((imebra::ReadMemory const *)arg1)->empty();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1ReadWriteMemory_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imebra::ReadWriteMemory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::ReadWriteMemory *)new imebra::ReadWriteMemory();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::ReadWriteMemory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1ReadWriteMemory_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  imebra::ReadWriteMemory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (imebra::ReadWriteMemory *)new imebra::ReadWriteMemory(arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::ReadWriteMemory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1ReadWriteMemory_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::ReadMemory *arg1 = 0 ;
  imebra::ReadWriteMemory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::ReadMemory **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::ReadMemory const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::ReadWriteMemory *)new imebra::ReadWriteMemory((imebra::ReadMemory const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::ReadWriteMemory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1ReadWriteMemory_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jbyteArray jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  imebra::ReadWriteMemory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    if (jarg1) {
      arg1 = (char *) jenv->GetByteArrayElements(jarg1, 0);
      arg2 = (size_t) jenv->GetArrayLength(jarg1);
    } else {
      arg1 = 0;
      arg2 = 0;
    }
  }
  {
    try {
      result = (imebra::ReadWriteMemory *)new imebra::ReadWriteMemory((char const *)arg1,arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::ReadWriteMemory **)&jresult = result; 
  {
    if (jarg1) jenv->ReleaseByteArrayElements(jarg1, (jbyte *)arg1, 0);
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1ReadWriteMemory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::ReadWriteMemory *arg1 = (imebra::ReadWriteMemory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::ReadWriteMemory **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_ReadWriteMemory_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  imebra::ReadWriteMemory *arg1 = (imebra::ReadWriteMemory *) 0 ;
  imebra::ReadMemory *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::ReadWriteMemory **)&jarg1; 
  arg2 = *(imebra::ReadMemory **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::ReadMemory const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->copyFrom((imebra::ReadMemory const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_ReadWriteMemory_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  imebra::ReadWriteMemory *arg1 = (imebra::ReadWriteMemory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::ReadWriteMemory **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_ReadWriteMemory_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  imebra::ReadWriteMemory *arg1 = (imebra::ReadWriteMemory *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::ReadWriteMemory **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->resize(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_ReadWriteMemory_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  imebra::ReadWriteMemory *arg1 = (imebra::ReadWriteMemory *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::ReadWriteMemory **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_ReadWriteMemory_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  imebra::ReadWriteMemory *arg1 = (imebra::ReadWriteMemory *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::ReadWriteMemory **)&jarg1; 
  {
    if (jarg2) {
      arg2 = (char *) jenv->GetByteArrayElements(jarg2, 0);
      arg3 = (size_t) jenv->GetArrayLength(jarg2);
    } else {
      arg2 = 0;
      arg3 = 0;
    }
  }
  {
    try {
      (arg1)->assign((char const *)arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
  {
    if (jarg2) jenv->ReleaseByteArrayElements(jarg2, (jbyte *)arg2, 0);
  }
  
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_ReadWriteMemory_1assignRegion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jlong jarg4) {
  imebra::ReadWriteMemory *arg1 = (imebra::ReadWriteMemory *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  size_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::ReadWriteMemory **)&jarg1; 
  {
    if (jarg2) {
      arg2 = (char *) jenv->GetByteArrayElements(jarg2, 0);
      arg3 = (size_t) jenv->GetArrayLength(jarg2);
    } else {
      arg2 = 0;
      arg3 = 0;
    }
  }
  arg4 = (size_t)jarg4; 
  {
    try {
      (arg1)->assignRegion((char const *)arg2,arg3,arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
  {
    if (jarg2) jenv->ReleaseByteArrayElements(jarg2, (jbyte *)arg2, 0);
  }
  
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_MemoryPool_1flush(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  {
    try {
      imebra::MemoryPool::flush();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_MemoryPool_1getUnusedMemorySize(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = imebra::MemoryPool::getUnusedMemorySize();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_MemoryPool_1setMemoryPoolSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  size_t arg1 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      imebra::MemoryPool::setMemoryPoolSize(arg1,arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1MemoryPool(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imebra::MemoryPool *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::MemoryPool *)new imebra::MemoryPool();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::MemoryPool **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1MemoryPool(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::MemoryPool *arg1 = (imebra::MemoryPool *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::MemoryPool **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1BaseStreamInput(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::BaseStreamInput *arg1 = (imebra::BaseStreamInput *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::BaseStreamInput **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1StreamTimeout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  imebra::BaseStreamInput *arg1 = 0 ;
  std::uint32_t arg2 ;
  imebra::StreamTimeout *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::BaseStreamInput **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::BaseStreamInput & reference is null");
    return 0;
  } 
  arg2 = (std::uint32_t)jarg2; 
  {
    try {
      result = (imebra::StreamTimeout *)new imebra::StreamTimeout(*arg1,arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::StreamTimeout **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1StreamTimeout(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::StreamTimeout *arg1 = (imebra::StreamTimeout *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::StreamTimeout **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1BaseStreamOutput(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::BaseStreamOutput *arg1 = (imebra::BaseStreamOutput *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::BaseStreamOutput **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1StreamReader_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::BaseStreamInput *arg1 = 0 ;
  imebra::StreamReader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::BaseStreamInput **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::BaseStreamInput const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::StreamReader *)new imebra::StreamReader((imebra::BaseStreamInput const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::StreamReader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1StreamReader_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  imebra::BaseStreamInput *arg1 = 0 ;
  size_t arg2 ;
  size_t arg3 ;
  imebra::StreamReader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::BaseStreamInput **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::BaseStreamInput const & reference is null");
    return 0;
  } 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (imebra::StreamReader *)new imebra::StreamReader((imebra::BaseStreamInput const &)*arg1,arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::StreamReader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_StreamReader_1getVirtualStream(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  imebra::StreamReader *arg1 = (imebra::StreamReader *) 0 ;
  size_t arg2 ;
  imebra::StreamReader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::StreamReader **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (imebra::StreamReader *)(arg1)->getVirtualStream(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::StreamReader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_StreamReader_1terminate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  imebra::StreamReader *arg1 = (imebra::StreamReader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::StreamReader **)&jarg1; 
  {
    try {
      (arg1)->terminate();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1StreamReader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::StreamReader *arg1 = (imebra::StreamReader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::StreamReader **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1StreamWriter_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::BaseStreamOutput *arg1 = 0 ;
  imebra::StreamWriter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::BaseStreamOutput **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::BaseStreamOutput const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::StreamWriter *)new imebra::StreamWriter((imebra::BaseStreamOutput const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::StreamWriter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1StreamWriter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  imebra::BaseStreamOutput *arg1 = 0 ;
  size_t arg2 ;
  size_t arg3 ;
  imebra::StreamWriter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::BaseStreamOutput **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::BaseStreamOutput const & reference is null");
    return 0;
  } 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (imebra::StreamWriter *)new imebra::StreamWriter((imebra::BaseStreamOutput const &)*arg1,arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::StreamWriter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1StreamWriter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::StreamWriter *arg1 = (imebra::StreamWriter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::StreamWriter **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1StreamWriter_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::TCPStream *arg1 = 0 ;
  imebra::StreamWriter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::TCPStream **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TCPStream const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::StreamWriter *)new_imebra_StreamWriter__SWIG_2((imebra::TCPStream const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::StreamWriter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1StreamWriter_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::Pipe *arg1 = 0 ;
  imebra::StreamWriter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Pipe **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::Pipe const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::StreamWriter *)new_imebra_StreamWriter__SWIG_3((imebra::Pipe const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::StreamWriter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1ReadingDataHandler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::ReadingDataHandler *arg1 = (imebra::ReadingDataHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::ReadingDataHandler **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_ReadingDataHandler_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::ReadingDataHandler *arg1 = (imebra::ReadingDataHandler *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::ReadingDataHandler **)&jarg1; 
  {
    try {
      result = ((imebra::ReadingDataHandler const *)arg1)->getSize();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_ReadingDataHandler_1getDataType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imebra::ReadingDataHandler *arg1 = (imebra::ReadingDataHandler *) 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::ReadingDataHandler **)&jarg1; 
  {
    try {
      result = (imebra::tagVR_t)((imebra::ReadingDataHandler const *)arg1)->getDataType();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_ReadingDataHandler_1getSignedLong(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  imebra::ReadingDataHandler *arg1 = (imebra::ReadingDataHandler *) 0 ;
  size_t arg2 ;
  std::int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::ReadingDataHandler **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (std::int32_t)((imebra::ReadingDataHandler const *)arg1)->getSignedLong(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_ReadingDataHandler_1getUnsignedLong(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  imebra::ReadingDataHandler *arg1 = (imebra::ReadingDataHandler *) 0 ;
  size_t arg2 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::ReadingDataHandler **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (std::uint32_t)((imebra::ReadingDataHandler const *)arg1)->getUnsignedLong(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_imebra_imebraJNI_ReadingDataHandler_1getDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jdouble jresult = 0 ;
  imebra::ReadingDataHandler *arg1 = (imebra::ReadingDataHandler *) 0 ;
  size_t arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::ReadingDataHandler **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (double)((imebra::ReadingDataHandler const *)arg1)->getDouble(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_ReadingDataHandler_1getString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  imebra::ReadingDataHandler *arg1 = (imebra::ReadingDataHandler *) 0 ;
  size_t arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::ReadingDataHandler **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = ((imebra::ReadingDataHandler const *)arg1)->getString(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_ReadingDataHandler_1getUnicodeString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  imebra::ReadingDataHandler *arg1 = (imebra::ReadingDataHandler *) 0 ;
  size_t arg2 ;
  std::wstring result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::ReadingDataHandler **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = ((imebra::ReadingDataHandler const *)arg1)->getUnicodeString(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(std::wstring **)&jresult = new std::wstring((const std::wstring &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_ReadingDataHandler_1getDate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  imebra::ReadingDataHandler *arg1 = (imebra::ReadingDataHandler *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< imebra::Date > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::ReadingDataHandler **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = ((imebra::ReadingDataHandler const *)arg1)->getDate(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::Date **)&jresult = new imebra::Date((const imebra::Date &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_ReadingDataHandler_1getAge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  imebra::ReadingDataHandler *arg1 = (imebra::ReadingDataHandler *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< imebra::Age > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::ReadingDataHandler **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = ((imebra::ReadingDataHandler const *)arg1)->getAge(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::Age **)&jresult = new imebra::Age((const imebra::Age &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1ReadingDataHandlerNumeric(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::ReadingDataHandlerNumeric *arg1 = (imebra::ReadingDataHandlerNumeric *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::ReadingDataHandlerNumeric **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_ReadingDataHandlerNumeric_1getMemory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::ReadingDataHandlerNumeric *arg1 = (imebra::ReadingDataHandlerNumeric *) 0 ;
  imebra::ReadMemory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::ReadingDataHandlerNumeric **)&jarg1; 
  {
    try {
      result = (imebra::ReadMemory *)((imebra::ReadingDataHandlerNumeric const *)arg1)->getMemory();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::ReadMemory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_ReadingDataHandlerNumeric_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  jlong jresult = 0 ;
  imebra::ReadingDataHandlerNumeric *arg1 = (imebra::ReadingDataHandlerNumeric *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::ReadingDataHandlerNumeric **)&jarg1; 
  {
    if (jarg2) {
      arg2 = (char *) jenv->GetByteArrayElements(jarg2, 0);
      arg3 = (size_t) jenv->GetArrayLength(jarg2);
    } else {
      arg2 = 0;
      arg3 = 0;
    }
  }
  {
    try {
      result = ((imebra::ReadingDataHandlerNumeric const *)arg1)->data(arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  {
    if (jarg2) jenv->ReleaseByteArrayElements(jarg2, (jbyte *)arg2, 0);
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_ReadingDataHandlerNumeric_1getUnitSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::ReadingDataHandlerNumeric *arg1 = (imebra::ReadingDataHandlerNumeric *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::ReadingDataHandlerNumeric **)&jarg1; 
  {
    try {
      result = ((imebra::ReadingDataHandlerNumeric const *)arg1)->getUnitSize();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_imebra_imebraJNI_ReadingDataHandlerNumeric_1isSigned(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  imebra::ReadingDataHandlerNumeric *arg1 = (imebra::ReadingDataHandlerNumeric *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::ReadingDataHandlerNumeric **)&jarg1; 
  {
    try {
      result = (bool)((imebra::ReadingDataHandlerNumeric const *)arg1)->isSigned();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_imebra_imebraJNI_ReadingDataHandlerNumeric_1isFloat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  imebra::ReadingDataHandlerNumeric *arg1 = (imebra::ReadingDataHandlerNumeric *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::ReadingDataHandlerNumeric **)&jarg1; 
  {
    try {
      result = (bool)((imebra::ReadingDataHandlerNumeric const *)arg1)->isFloat();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_ReadingDataHandlerNumeric_1copyTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  imebra::ReadingDataHandlerNumeric *arg1 = (imebra::ReadingDataHandlerNumeric *) 0 ;
  imebra::WritingDataHandlerNumeric *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::ReadingDataHandlerNumeric **)&jarg1; 
  arg2 = *(imebra::WritingDataHandlerNumeric **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::WritingDataHandlerNumeric const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->copyTo((imebra::WritingDataHandlerNumeric const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1WritingDataHandler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::WritingDataHandler *arg1 = (imebra::WritingDataHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::WritingDataHandler **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_WritingDataHandler_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  imebra::WritingDataHandler *arg1 = (imebra::WritingDataHandler *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::WritingDataHandler **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->setSize(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_WritingDataHandler_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::WritingDataHandler *arg1 = (imebra::WritingDataHandler *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::WritingDataHandler **)&jarg1; 
  {
    try {
      result = ((imebra::WritingDataHandler const *)arg1)->getSize();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_WritingDataHandler_1getDataType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imebra::WritingDataHandler *arg1 = (imebra::WritingDataHandler *) 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::WritingDataHandler **)&jarg1; 
  {
    try {
      result = (imebra::tagVR_t)((imebra::WritingDataHandler const *)arg1)->getDataType();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_WritingDataHandler_1setSignedLong(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  imebra::WritingDataHandler *arg1 = (imebra::WritingDataHandler *) 0 ;
  size_t arg2 ;
  std::int32_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::WritingDataHandler **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (std::int32_t)jarg3; 
  {
    try {
      (arg1)->setSignedLong(arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_WritingDataHandler_1setUnsignedLong(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  imebra::WritingDataHandler *arg1 = (imebra::WritingDataHandler *) 0 ;
  size_t arg2 ;
  std::uint32_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::WritingDataHandler **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (std::uint32_t)jarg3; 
  {
    try {
      (arg1)->setUnsignedLong(arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_WritingDataHandler_1setDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3) {
  imebra::WritingDataHandler *arg1 = (imebra::WritingDataHandler *) 0 ;
  size_t arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::WritingDataHandler **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->setDouble(arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_WritingDataHandler_1setString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  imebra::WritingDataHandler *arg1 = (imebra::WritingDataHandler *) 0 ;
  size_t arg2 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::WritingDataHandler **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      (arg1)->setString(arg2,(std::string const &)*arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_WritingDataHandler_1setUnicodeString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  imebra::WritingDataHandler *arg1 = (imebra::WritingDataHandler *) 0 ;
  size_t arg2 ;
  std::wstring *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::WritingDataHandler **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(std::wstring **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setUnicodeString(arg2,(std::wstring const &)*arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_WritingDataHandler_1setDate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  imebra::WritingDataHandler *arg1 = (imebra::WritingDataHandler *) 0 ;
  size_t arg2 ;
  imebra::Date *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(imebra::WritingDataHandler **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(imebra::Date **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::Date const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setDate(arg2,(imebra::Date const &)*arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_WritingDataHandler_1setAge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  imebra::WritingDataHandler *arg1 = (imebra::WritingDataHandler *) 0 ;
  size_t arg2 ;
  imebra::Age *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(imebra::WritingDataHandler **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(imebra::Age **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::Age const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setAge(arg2,(imebra::Age const &)*arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1WritingDataHandlerNumeric(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::WritingDataHandlerNumeric *arg1 = (imebra::WritingDataHandlerNumeric *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::WritingDataHandlerNumeric **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_WritingDataHandlerNumeric_1getMemory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::WritingDataHandlerNumeric *arg1 = (imebra::WritingDataHandlerNumeric *) 0 ;
  imebra::ReadWriteMemory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::WritingDataHandlerNumeric **)&jarg1; 
  {
    try {
      result = (imebra::ReadWriteMemory *)((imebra::WritingDataHandlerNumeric const *)arg1)->getMemory();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::ReadWriteMemory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_WritingDataHandlerNumeric_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  imebra::WritingDataHandlerNumeric *arg1 = (imebra::WritingDataHandlerNumeric *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::WritingDataHandlerNumeric **)&jarg1; 
  {
    if (jarg2) {
      arg2 = (char *) jenv->GetByteArrayElements(jarg2, 0);
      arg3 = (size_t) jenv->GetArrayLength(jarg2);
    } else {
      arg2 = 0;
      arg3 = 0;
    }
  }
  {
    try {
      (arg1)->assign((char const *)arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
  {
    if (jarg2) jenv->ReleaseByteArrayElements(jarg2, (jbyte *)arg2, 0);
  }
  
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_WritingDataHandlerNumeric_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  jlong jresult = 0 ;
  imebra::WritingDataHandlerNumeric *arg1 = (imebra::WritingDataHandlerNumeric *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::WritingDataHandlerNumeric **)&jarg1; 
  {
    if (jarg2) {
      arg2 = (char *) jenv->GetByteArrayElements(jarg2, 0);
      arg3 = (size_t) jenv->GetArrayLength(jarg2);
    } else {
      arg2 = 0;
      arg3 = 0;
    }
  }
  {
    try {
      result = ((imebra::WritingDataHandlerNumeric const *)arg1)->data(arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  {
    if (jarg2) jenv->ReleaseByteArrayElements(jarg2, (jbyte *)arg2, 0);
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_WritingDataHandlerNumeric_1getUnitSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::WritingDataHandlerNumeric *arg1 = (imebra::WritingDataHandlerNumeric *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::WritingDataHandlerNumeric **)&jarg1; 
  {
    try {
      result = ((imebra::WritingDataHandlerNumeric const *)arg1)->getUnitSize();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_imebra_imebraJNI_WritingDataHandlerNumeric_1isSigned(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  imebra::WritingDataHandlerNumeric *arg1 = (imebra::WritingDataHandlerNumeric *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::WritingDataHandlerNumeric **)&jarg1; 
  {
    try {
      result = (bool)((imebra::WritingDataHandlerNumeric const *)arg1)->isSigned();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_imebra_imebraJNI_WritingDataHandlerNumeric_1isFloat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  imebra::WritingDataHandlerNumeric *arg1 = (imebra::WritingDataHandlerNumeric *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::WritingDataHandlerNumeric **)&jarg1; 
  {
    try {
      result = (bool)((imebra::WritingDataHandlerNumeric const *)arg1)->isFloat();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_WritingDataHandlerNumeric_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  imebra::WritingDataHandlerNumeric *arg1 = (imebra::WritingDataHandlerNumeric *) 0 ;
  imebra::ReadingDataHandlerNumeric *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::WritingDataHandlerNumeric **)&jarg1; 
  arg2 = *(imebra::ReadingDataHandlerNumeric **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::ReadingDataHandlerNumeric const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->copyFrom((imebra::ReadingDataHandlerNumeric const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1LUT(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::LUT *arg1 = (imebra::LUT *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::LUT **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_LUT_1getDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::LUT *arg1 = (imebra::LUT *) 0 ;
  std::wstring result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::LUT **)&jarg1; 
  {
    try {
      result = ((imebra::LUT const *)arg1)->getDescription();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(std::wstring **)&jresult = new std::wstring((const std::wstring &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_LUT_1getReadingDataHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::LUT *arg1 = (imebra::LUT *) 0 ;
  imebra::ReadingDataHandlerNumeric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::LUT **)&jarg1; 
  {
    try {
      result = (imebra::ReadingDataHandlerNumeric *)((imebra::LUT const *)arg1)->getReadingDataHandler();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::ReadingDataHandlerNumeric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_LUT_1getBits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::LUT *arg1 = (imebra::LUT *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::LUT **)&jarg1; 
  {
    try {
      result = ((imebra::LUT const *)arg1)->getBits();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_LUT_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::LUT *arg1 = (imebra::LUT *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::LUT **)&jarg1; 
  {
    try {
      result = ((imebra::LUT const *)arg1)->getSize();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_LUT_1getFirstMapped(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imebra::LUT *arg1 = (imebra::LUT *) 0 ;
  std::int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::LUT **)&jarg1; 
  {
    try {
      result = (std::int32_t)((imebra::LUT const *)arg1)->getFirstMapped();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_LUT_1getMappedValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  imebra::LUT *arg1 = (imebra::LUT *) 0 ;
  std::int32_t arg2 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::LUT **)&jarg1; 
  arg2 = (std::int32_t)jarg2; 
  {
    try {
      result = (std::uint32_t)((imebra::LUT const *)arg1)->getMappedValue(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1Image(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3, jstring jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  std::uint32_t arg1 ;
  std::uint32_t arg2 ;
  imebra::bitDepth_t arg3 ;
  std::string *arg4 = 0 ;
  std::uint32_t arg5 ;
  imebra::Image *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::uint32_t)jarg1; 
  arg2 = (std::uint32_t)jarg2; 
  arg3 = (imebra::bitDepth_t)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (std::uint32_t)jarg5; 
  {
    try {
      result = (imebra::Image *)new imebra::Image(arg1,arg2,arg3,(std::string const &)*arg4,arg5);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::Image **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1Image(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::Image *arg1 = (imebra::Image *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::Image **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_com_imebra_imebraJNI_Image_1getWidthMm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  imebra::Image *arg1 = (imebra::Image *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Image **)&jarg1; 
  {
    try {
      result = (double)((imebra::Image const *)arg1)->getWidthMm();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_imebra_imebraJNI_Image_1getHeightMm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  imebra::Image *arg1 = (imebra::Image *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Image **)&jarg1; 
  {
    try {
      result = (double)((imebra::Image const *)arg1)->getHeightMm();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_Image_1setSizeMm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  imebra::Image *arg1 = (imebra::Image *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Image **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->setSizeMm(arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_Image_1getWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::Image *arg1 = (imebra::Image *) 0 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Image **)&jarg1; 
  {
    try {
      result = (std::uint32_t)((imebra::Image const *)arg1)->getWidth();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_Image_1getHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::Image *arg1 = (imebra::Image *) 0 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Image **)&jarg1; 
  {
    try {
      result = (std::uint32_t)((imebra::Image const *)arg1)->getHeight();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_Image_1getReadingDataHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::Image *arg1 = (imebra::Image *) 0 ;
  imebra::ReadingDataHandlerNumeric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Image **)&jarg1; 
  {
    try {
      result = (imebra::ReadingDataHandlerNumeric *)((imebra::Image const *)arg1)->getReadingDataHandler();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::ReadingDataHandlerNumeric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_Image_1getWritingDataHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::Image *arg1 = (imebra::Image *) 0 ;
  imebra::WritingDataHandlerNumeric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Image **)&jarg1; 
  {
    try {
      result = (imebra::WritingDataHandlerNumeric *)(arg1)->getWritingDataHandler();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::WritingDataHandlerNumeric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_Image_1getColorSpace(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imebra::Image *arg1 = (imebra::Image *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Image **)&jarg1; 
  {
    try {
      result = ((imebra::Image const *)arg1)->getColorSpace();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_Image_1getChannelsNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::Image *arg1 = (imebra::Image *) 0 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Image **)&jarg1; 
  {
    try {
      result = (std::uint32_t)((imebra::Image const *)arg1)->getChannelsNumber();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_Image_1getDepth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imebra::Image *arg1 = (imebra::Image *) 0 ;
  imebra::bitDepth_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Image **)&jarg1; 
  {
    try {
      result = (imebra::bitDepth_t)((imebra::Image const *)arg1)->getDepth();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_Image_1getHighBit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::Image *arg1 = (imebra::Image *) 0 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Image **)&jarg1; 
  {
    try {
      result = (std::uint32_t)((imebra::Image const *)arg1)->getHighBit();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1Tag(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::Tag *arg1 = (imebra::Tag *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::Tag **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_Tag_1getBuffersCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::Tag *arg1 = (imebra::Tag *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Tag **)&jarg1; 
  {
    try {
      result = ((imebra::Tag const *)arg1)->getBuffersCount();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_imebra_imebraJNI_Tag_1bufferExists(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  imebra::Tag *arg1 = (imebra::Tag *) 0 ;
  size_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Tag **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (bool)((imebra::Tag const *)arg1)->bufferExists(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_Tag_1getBufferSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  imebra::Tag *arg1 = (imebra::Tag *) 0 ;
  size_t arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Tag **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = ((imebra::Tag const *)arg1)->getBufferSize(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_Tag_1getReadingDataHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  imebra::Tag *arg1 = (imebra::Tag *) 0 ;
  size_t arg2 ;
  imebra::ReadingDataHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Tag **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (imebra::ReadingDataHandler *)((imebra::Tag const *)arg1)->getReadingDataHandler(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::ReadingDataHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_Tag_1getWritingDataHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  imebra::Tag *arg1 = (imebra::Tag *) 0 ;
  size_t arg2 ;
  imebra::WritingDataHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Tag **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (imebra::WritingDataHandler *)(arg1)->getWritingDataHandler(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::WritingDataHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_Tag_1getReadingDataHandlerNumeric(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  imebra::Tag *arg1 = (imebra::Tag *) 0 ;
  size_t arg2 ;
  imebra::ReadingDataHandlerNumeric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Tag **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (imebra::ReadingDataHandlerNumeric *)((imebra::Tag const *)arg1)->getReadingDataHandlerNumeric(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::ReadingDataHandlerNumeric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_Tag_1getReadingDataHandlerRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  imebra::Tag *arg1 = (imebra::Tag *) 0 ;
  size_t arg2 ;
  imebra::ReadingDataHandlerNumeric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Tag **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (imebra::ReadingDataHandlerNumeric *)((imebra::Tag const *)arg1)->getReadingDataHandlerRaw(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::ReadingDataHandlerNumeric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_Tag_1getWritingDataHandlerNumeric(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  imebra::Tag *arg1 = (imebra::Tag *) 0 ;
  size_t arg2 ;
  imebra::WritingDataHandlerNumeric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Tag **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (imebra::WritingDataHandlerNumeric *)(arg1)->getWritingDataHandlerNumeric(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::WritingDataHandlerNumeric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_Tag_1getWritingDataHandlerRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  imebra::Tag *arg1 = (imebra::Tag *) 0 ;
  size_t arg2 ;
  imebra::WritingDataHandlerNumeric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Tag **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (imebra::WritingDataHandlerNumeric *)(arg1)->getWritingDataHandlerRaw(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::WritingDataHandlerNumeric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_Tag_1getStreamReader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  imebra::Tag *arg1 = (imebra::Tag *) 0 ;
  size_t arg2 ;
  imebra::StreamReader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Tag **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (imebra::StreamReader *)(arg1)->getStreamReader(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::StreamReader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_Tag_1getStreamWriter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  imebra::Tag *arg1 = (imebra::Tag *) 0 ;
  size_t arg2 ;
  imebra::StreamWriter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Tag **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (imebra::StreamWriter *)(arg1)->getStreamWriter(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::StreamWriter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_Tag_1getSequenceItem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  imebra::Tag *arg1 = (imebra::Tag *) 0 ;
  size_t arg2 ;
  imebra::DataSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Tag **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (imebra::DataSet *)((imebra::Tag const *)arg1)->getSequenceItem(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::DataSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_imebra_imebraJNI_Tag_1sequenceItemExists(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  imebra::Tag *arg1 = (imebra::Tag *) 0 ;
  size_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Tag **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (bool)((imebra::Tag const *)arg1)->sequenceItemExists(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_Tag_1setSequenceItem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  imebra::Tag *arg1 = (imebra::Tag *) 0 ;
  size_t arg2 ;
  imebra::DataSet *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(imebra::Tag **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(imebra::DataSet **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::DataSet const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setSequenceItem(arg2,(imebra::DataSet const &)*arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_Tag_1appendSequenceItem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  imebra::Tag *arg1 = (imebra::Tag *) 0 ;
  imebra::DataSet *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::Tag **)&jarg1; 
  arg2 = *(imebra::DataSet **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::DataSet const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->appendSequenceItem((imebra::DataSet const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_Tag_1getDataType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imebra::Tag *arg1 = (imebra::Tag *) 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Tag **)&jarg1; 
  {
    try {
      result = (imebra::tagVR_t)((imebra::Tag const *)arg1)->getDataType();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1DataSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imebra::DataSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::DataSet *)new imebra::DataSet();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::DataSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1DataSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  imebra::DataSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (imebra::DataSet *)new imebra::DataSet((std::string const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::DataSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1DataSet_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  imebra::charsetsList_t *arg2 = 0 ;
  imebra::DataSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(imebra::charsetsList_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::charsetsList_t const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::DataSet *)new imebra::DataSet((std::string const &)*arg1,(imebra::charsetsList_t const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::DataSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1DataSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::DataSet **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DataSet_1getTags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::tagsIds_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  {
    try {
      result = ((imebra::DataSet const *)arg1)->getTags();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::tagsIds_t **)&jresult = new imebra::tagsIds_t((const imebra::tagsIds_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DataSet_1getTag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  imebra::Tag *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::Tag *)((imebra::DataSet const *)arg1)->getTag((imebra::TagId const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::Tag **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DataSet_1getTagCreate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  imebra::tagVR_t arg3 ;
  imebra::Tag *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (imebra::tagVR_t)jarg3; 
  {
    try {
      result = (imebra::Tag *)(arg1)->getTagCreate((imebra::TagId const &)*arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::Tag **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DataSet_1getTagCreate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  imebra::Tag *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::Tag *)(arg1)->getTagCreate((imebra::TagId const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::Tag **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DataSet_1getImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  size_t arg2 ;
  imebra::Image *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (imebra::Image *)(arg1)->getImage(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::Image **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DataSet_1getImageApplyModalityTransform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  size_t arg2 ;
  imebra::Image *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (imebra::Image *)(arg1)->getImageApplyModalityTransform(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::Image **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_DataSet_1setImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jint jarg4) {
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  size_t arg2 ;
  imebra::Image *arg3 = 0 ;
  imebra::imageQuality_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(imebra::Image **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::Image const & reference is null");
    return ;
  } 
  arg4 = (imebra::imageQuality_t)jarg4; 
  {
    try {
      (arg1)->setImage(arg2,(imebra::Image const &)*arg3,arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DataSet_1getVOIs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::vois_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  {
    try {
      result = (arg1)->getVOIs();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::vois_t **)&jresult = new imebra::vois_t((const imebra::vois_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DataSet_1getSequenceItem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  imebra::DataSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (imebra::DataSet *)(arg1)->getSequenceItem((imebra::TagId const &)*arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::DataSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_DataSet_1setSequenceItem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  imebra::DataSet *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return ;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = *(imebra::DataSet **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::DataSet const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setSequenceItem((imebra::TagId const &)*arg2,arg3,(imebra::DataSet const &)*arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DataSet_1getLUT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  imebra::LUT *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (imebra::LUT *)(arg1)->getLUT((imebra::TagId const &)*arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::LUT **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DataSet_1getReadingDataHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  imebra::ReadingDataHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (imebra::ReadingDataHandler *)((imebra::DataSet const *)arg1)->getReadingDataHandler((imebra::TagId const &)*arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::ReadingDataHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DataSet_1getWritingDataHandler_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jint jarg4) {
  jlong jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  imebra::tagVR_t arg4 ;
  imebra::WritingDataHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (imebra::tagVR_t)jarg4; 
  {
    try {
      result = (imebra::WritingDataHandler *)(arg1)->getWritingDataHandler((imebra::TagId const &)*arg2,arg3,arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::WritingDataHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DataSet_1getWritingDataHandler_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  imebra::WritingDataHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (imebra::WritingDataHandler *)(arg1)->getWritingDataHandler((imebra::TagId const &)*arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::WritingDataHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DataSet_1getReadingDataHandlerNumeric(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  imebra::ReadingDataHandlerNumeric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (imebra::ReadingDataHandlerNumeric *)((imebra::DataSet const *)arg1)->getReadingDataHandlerNumeric((imebra::TagId const &)*arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::ReadingDataHandlerNumeric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DataSet_1getReadingDataHandlerRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  imebra::ReadingDataHandlerNumeric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (imebra::ReadingDataHandlerNumeric *)((imebra::DataSet const *)arg1)->getReadingDataHandlerRaw((imebra::TagId const &)*arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::ReadingDataHandlerNumeric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DataSet_1getWritingDataHandlerNumeric_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jint jarg4) {
  jlong jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  imebra::tagVR_t arg4 ;
  imebra::WritingDataHandlerNumeric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (imebra::tagVR_t)jarg4; 
  {
    try {
      result = (imebra::WritingDataHandlerNumeric *)(arg1)->getWritingDataHandlerNumeric((imebra::TagId const &)*arg2,arg3,arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::WritingDataHandlerNumeric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DataSet_1getWritingDataHandlerNumeric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  imebra::WritingDataHandlerNumeric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (imebra::WritingDataHandlerNumeric *)(arg1)->getWritingDataHandlerNumeric((imebra::TagId const &)*arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::WritingDataHandlerNumeric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DataSet_1getWritingDataHandlerRaw_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jint jarg4) {
  jlong jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  imebra::tagVR_t arg4 ;
  imebra::WritingDataHandlerNumeric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (imebra::tagVR_t)jarg4; 
  {
    try {
      result = (imebra::WritingDataHandlerNumeric *)(arg1)->getWritingDataHandlerRaw((imebra::TagId const &)*arg2,arg3,arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::WritingDataHandlerNumeric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DataSet_1getWritingDataHandlerRaw_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  imebra::WritingDataHandlerNumeric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (imebra::WritingDataHandlerNumeric *)(arg1)->getWritingDataHandlerRaw((imebra::TagId const &)*arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::WritingDataHandlerNumeric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_imebra_imebraJNI_DataSet_1bufferExists(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jboolean jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (bool)(arg1)->bufferExists((imebra::TagId const &)*arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_DataSet_1getSignedLong_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  std::int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (std::int32_t)((imebra::DataSet const *)arg1)->getSignedLong((imebra::TagId const &)*arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_DataSet_1getSignedLong_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jint jarg4) {
  jint jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  std::int32_t arg4 ;
  std::int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (std::int32_t)jarg4; 
  {
    try {
      result = (std::int32_t)((imebra::DataSet const *)arg1)->getSignedLong((imebra::TagId const &)*arg2,arg3,arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_DataSet_1setSignedLong_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4) {
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  std::int32_t arg3 ;
  imebra::tagVR_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return ;
  } 
  arg3 = (std::int32_t)jarg3; 
  arg4 = (imebra::tagVR_t)jarg4; 
  {
    try {
      (arg1)->setSignedLong((imebra::TagId const &)*arg2,arg3,arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_DataSet_1setSignedLong_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  std::int32_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return ;
  } 
  arg3 = (std::int32_t)jarg3; 
  {
    try {
      (arg1)->setSignedLong((imebra::TagId const &)*arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DataSet_1getUnsignedLong_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (std::uint32_t)((imebra::DataSet const *)arg1)->getUnsignedLong((imebra::TagId const &)*arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DataSet_1getUnsignedLong_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  std::uint32_t arg4 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (std::uint32_t)jarg4; 
  {
    try {
      result = (std::uint32_t)((imebra::DataSet const *)arg1)->getUnsignedLong((imebra::TagId const &)*arg2,arg3,arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_DataSet_1setUnsignedLong_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jint jarg4) {
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  std::uint32_t arg3 ;
  imebra::tagVR_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return ;
  } 
  arg3 = (std::uint32_t)jarg3; 
  arg4 = (imebra::tagVR_t)jarg4; 
  {
    try {
      (arg1)->setUnsignedLong((imebra::TagId const &)*arg2,arg3,arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_DataSet_1setUnsignedLong_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  std::uint32_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return ;
  } 
  arg3 = (std::uint32_t)jarg3; 
  {
    try {
      (arg1)->setUnsignedLong((imebra::TagId const &)*arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_com_imebra_imebraJNI_DataSet_1getDouble_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jdouble jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (double)((imebra::DataSet const *)arg1)->getDouble((imebra::TagId const &)*arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_imebra_imebraJNI_DataSet_1getDouble_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (double)((imebra::DataSet const *)arg1)->getDouble((imebra::TagId const &)*arg2,arg3,arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_DataSet_1setDouble_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3, jint jarg4) {
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  double arg3 ;
  imebra::tagVR_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return ;
  } 
  arg3 = (double)jarg3; 
  arg4 = (imebra::tagVR_t)jarg4; 
  {
    try {
      (arg1)->setDouble((imebra::TagId const &)*arg2,arg3,arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_DataSet_1setDouble_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return ;
  } 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->setDouble((imebra::TagId const &)*arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_DataSet_1getString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jstring jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = ((imebra::DataSet const *)arg1)->getString((imebra::TagId const &)*arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_DataSet_1getString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jstring jarg4) {
  jstring jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  std::string *arg4 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  {
    try {
      result = ((imebra::DataSet const *)arg1)->getString((imebra::TagId const &)*arg2,arg3,(std::string const &)*arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_DataSet_1setString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jint jarg4) {
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  std::string *arg3 = 0 ;
  imebra::tagVR_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return ;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (imebra::tagVR_t)jarg4; 
  {
    try {
      (arg1)->setString((imebra::TagId const &)*arg2,(std::string const &)*arg3,arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_DataSet_1setString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return ;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      (arg1)->setString((imebra::TagId const &)*arg2,(std::string const &)*arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DataSet_1getUnicodeString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  std::wstring result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = ((imebra::DataSet const *)arg1)->getUnicodeString((imebra::TagId const &)*arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(std::wstring **)&jresult = new std::wstring((const std::wstring &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DataSet_1getUnicodeString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  std::wstring *arg4 = 0 ;
  std::wstring result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = *(std::wstring **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((imebra::DataSet const *)arg1)->getUnicodeString((imebra::TagId const &)*arg2,arg3,(std::wstring const &)*arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(std::wstring **)&jresult = new std::wstring((const std::wstring &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_DataSet_1setUnicodeString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jint jarg4) {
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  imebra::tagVR_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return ;
  } 
  arg3 = *(std::wstring **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring const & reference is null");
    return ;
  } 
  arg4 = (imebra::tagVR_t)jarg4; 
  {
    try {
      (arg1)->setUnicodeString((imebra::TagId const &)*arg2,(std::wstring const &)*arg3,arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_DataSet_1setUnicodeString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return ;
  } 
  arg3 = *(std::wstring **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setUnicodeString((imebra::TagId const &)*arg2,(std::wstring const &)*arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DataSet_1getAge_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  imebra::Age *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (imebra::Age *)((imebra::DataSet const *)arg1)->getAge((imebra::TagId const &)*arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::Age **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DataSet_1getAge_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  imebra::Age *arg4 = 0 ;
  imebra::Age *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = *(imebra::Age **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::Age const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::Age *)((imebra::DataSet const *)arg1)->getAge((imebra::TagId const &)*arg2,arg3,(imebra::Age const &)*arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::Age **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_DataSet_1setAge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  imebra::Age *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return ;
  } 
  arg3 = *(imebra::Age **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::Age const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setAge((imebra::TagId const &)*arg2,(imebra::Age const &)*arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DataSet_1getDate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  imebra::Date *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (imebra::Date *)((imebra::DataSet const *)arg1)->getDate((imebra::TagId const &)*arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::Date **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DataSet_1getDate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  imebra::Date *arg4 = 0 ;
  imebra::Date *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = *(imebra::Date **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::Date const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::Date *)((imebra::DataSet const *)arg1)->getDate((imebra::TagId const &)*arg2,arg3,(imebra::Date const &)*arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::Date **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_DataSet_1setDate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  imebra::Date *arg3 = 0 ;
  imebra::tagVR_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return ;
  } 
  arg3 = *(imebra::Date **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::Date const & reference is null");
    return ;
  } 
  arg4 = (imebra::tagVR_t)jarg4; 
  {
    try {
      (arg1)->setDate((imebra::TagId const &)*arg2,(imebra::Date const &)*arg3,arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_DataSet_1setDate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  imebra::Date *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return ;
  } 
  arg3 = *(imebra::Date **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::Date const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setDate((imebra::TagId const &)*arg2,(imebra::Date const &)*arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_DataSet_1getDataType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::tagVR_t)((imebra::DataSet const *)arg1)->getDataType((imebra::TagId const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_CodecFactory_1load_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  imebra::StreamReader *arg1 = 0 ;
  size_t arg2 ;
  imebra::DataSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::StreamReader **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::StreamReader & reference is null");
    return 0;
  } 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (imebra::DataSet *)imebra::CodecFactory::load(*arg1,arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::DataSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_CodecFactory_1load_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::StreamReader *arg1 = 0 ;
  imebra::DataSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::StreamReader **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::StreamReader & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::DataSet *)imebra::CodecFactory::load(*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::DataSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_CodecFactory_1load_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  size_t arg2 ;
  imebra::DataSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (imebra::DataSet *)imebra::CodecFactory::load((std::string const &)*arg1,arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::DataSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_CodecFactory_1load_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  imebra::DataSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (imebra::DataSet *)imebra::CodecFactory::load((std::string const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::DataSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_CodecFactory_1saveImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jint jarg4, jint jarg5, jlong jarg6, jboolean jarg7, jboolean jarg8, jboolean jarg9, jboolean jarg10) {
  imebra::StreamWriter *arg1 = 0 ;
  imebra::Image *arg2 = 0 ;
  std::string *arg3 = 0 ;
  imebra::imageQuality_t arg4 ;
  imebra::tagVR_t arg5 ;
  std::uint32_t arg6 ;
  bool arg7 ;
  bool arg8 ;
  bool arg9 ;
  bool arg10 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::StreamWriter **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::StreamWriter & reference is null");
    return ;
  } 
  arg2 = *(imebra::Image **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::Image const & reference is null");
    return ;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (imebra::imageQuality_t)jarg4; 
  arg5 = (imebra::tagVR_t)jarg5; 
  arg6 = (std::uint32_t)jarg6; 
  arg7 = jarg7 ? true : false; 
  arg8 = jarg8 ? true : false; 
  arg9 = jarg9 ? true : false; 
  arg10 = jarg10 ? true : false; 
  {
    try {
      imebra::CodecFactory::saveImage(*arg1,(imebra::Image const &)*arg2,(std::string const &)*arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_CodecFactory_1save_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  imebra::DataSet *arg1 = 0 ;
  imebra::StreamWriter *arg2 = 0 ;
  imebra::codecType_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::DataSet const & reference is null");
    return ;
  } 
  arg2 = *(imebra::StreamWriter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::StreamWriter & reference is null");
    return ;
  } 
  arg3 = (imebra::codecType_t)jarg3; 
  {
    try {
      imebra::CodecFactory::save((imebra::DataSet const &)*arg1,*arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_CodecFactory_1save_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  imebra::DataSet *arg1 = 0 ;
  std::string *arg2 = 0 ;
  imebra::codecType_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DataSet **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::DataSet const & reference is null");
    return ;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (imebra::codecType_t)jarg3; 
  {
    try {
      imebra::CodecFactory::save((imebra::DataSet const &)*arg1,(std::string const &)*arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_CodecFactory_1setMaximumImageSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  std::uint32_t arg1 ;
  std::uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::uint32_t)jarg1; 
  arg2 = (std::uint32_t)jarg2; 
  {
    try {
      imebra::CodecFactory::setMaximumImageSize(arg1,arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1CodecFactory(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imebra::CodecFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::CodecFactory *)new imebra::CodecFactory();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::CodecFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1CodecFactory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::CodecFactory *arg1 = (imebra::CodecFactory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::CodecFactory **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_TCPAddress_1getNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imebra::TCPAddress *arg1 = (imebra::TCPAddress *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::TCPAddress **)&jarg1; 
  {
    try {
      result = ((imebra::TCPAddress const *)arg1)->getNode();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_TCPAddress_1getService(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imebra::TCPAddress *arg1 = (imebra::TCPAddress *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::TCPAddress **)&jarg1; 
  {
    try {
      result = ((imebra::TCPAddress const *)arg1)->getService();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1TCPAddress(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::TCPAddress *arg1 = (imebra::TCPAddress *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::TCPAddress **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1TCPActiveAddress(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  imebra::TCPActiveAddress *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (imebra::TCPActiveAddress *)new imebra::TCPActiveAddress((std::string const &)*arg1,(std::string const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::TCPActiveAddress **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1TCPActiveAddress(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::TCPActiveAddress *arg1 = (imebra::TCPActiveAddress *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::TCPActiveAddress **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1TCPPassiveAddress(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  imebra::TCPPassiveAddress *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (imebra::TCPPassiveAddress *)new imebra::TCPPassiveAddress((std::string const &)*arg1,(std::string const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::TCPPassiveAddress **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1TCPPassiveAddress(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::TCPPassiveAddress *arg1 = (imebra::TCPPassiveAddress *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::TCPPassiveAddress **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1TCPListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::TCPPassiveAddress *arg1 = 0 ;
  imebra::TCPListener *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::TCPPassiveAddress **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TCPPassiveAddress const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::TCPListener *)new imebra::TCPListener((imebra::TCPPassiveAddress const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::TCPListener **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_TCPListener_1waitForConnection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::TCPListener *arg1 = (imebra::TCPListener *) 0 ;
  imebra::TCPStream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::TCPListener **)&jarg1; 
  {
    try {
      result = (imebra::TCPStream *)(arg1)->waitForConnection();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::TCPStream **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_TCPListener_1terminate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  imebra::TCPListener *arg1 = (imebra::TCPListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::TCPListener **)&jarg1; 
  {
    try {
      (arg1)->terminate();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1TCPListener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::TCPListener *arg1 = (imebra::TCPListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::TCPListener **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1TCPStream(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::TCPActiveAddress *arg1 = 0 ;
  imebra::TCPStream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::TCPActiveAddress **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TCPActiveAddress const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::TCPStream *)new imebra::TCPStream((imebra::TCPActiveAddress const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::TCPStream **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_TCPStream_1getPeerAddress(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::TCPStream *arg1 = (imebra::TCPStream *) 0 ;
  imebra::TCPAddress *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::TCPStream **)&jarg1; 
  {
    try {
      result = (imebra::TCPAddress *)((imebra::TCPStream const *)arg1)->getPeerAddress();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::TCPAddress **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_TCPStream_1terminate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  imebra::TCPStream *arg1 = (imebra::TCPStream *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::TCPStream **)&jarg1; 
  {
    try {
      (arg1)->terminate();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1TCPStream(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::TCPStream *arg1 = (imebra::TCPStream *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::TCPStream **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1Pipe(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  imebra::Pipe *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (imebra::Pipe *)new imebra::Pipe(arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::Pipe **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_Pipe_1feed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  imebra::Pipe *arg1 = (imebra::Pipe *) 0 ;
  imebra::ReadMemory *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::Pipe **)&jarg1; 
  arg2 = *(imebra::ReadMemory **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::ReadMemory const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->feed((imebra::ReadMemory const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_Pipe_1sink(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  imebra::Pipe *arg1 = (imebra::Pipe *) 0 ;
  imebra::ReadWriteMemory *arg2 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::Pipe **)&jarg1; 
  arg2 = *(imebra::ReadWriteMemory **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::ReadWriteMemory & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->sink(*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_Pipe_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  imebra::Pipe *arg1 = (imebra::Pipe *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Pipe **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      (arg1)->close(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_Pipe_1terminate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  imebra::Pipe *arg1 = (imebra::Pipe *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Pipe **)&jarg1; 
  {
    try {
      (arg1)->terminate();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1Pipe(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::Pipe *arg1 = (imebra::Pipe *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::Pipe **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1Transform(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::Transform *arg1 = (imebra::Transform *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::Transform **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_imebra_imebraJNI_Transform_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  imebra::Transform *arg1 = (imebra::Transform *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Transform **)&jarg1; 
  {
    try {
      result = (bool)((imebra::Transform const *)arg1)->isEmpty();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_Transform_1allocateOutputImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  imebra::Transform *arg1 = (imebra::Transform *) 0 ;
  imebra::Image *arg2 = 0 ;
  std::uint32_t arg3 ;
  std::uint32_t arg4 ;
  imebra::Image *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::Transform **)&jarg1; 
  arg2 = *(imebra::Image **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::Image const & reference is null");
    return 0;
  } 
  arg3 = (std::uint32_t)jarg3; 
  arg4 = (std::uint32_t)jarg4; 
  {
    try {
      result = (imebra::Image *)((imebra::Transform const *)arg1)->allocateOutputImage((imebra::Image const &)*arg2,arg3,arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::Image **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_Transform_1runTransform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7, jobject jarg7_, jlong jarg8, jlong jarg9) {
  imebra::Transform *arg1 = (imebra::Transform *) 0 ;
  imebra::Image *arg2 = 0 ;
  std::uint32_t arg3 ;
  std::uint32_t arg4 ;
  std::uint32_t arg5 ;
  std::uint32_t arg6 ;
  imebra::Image *arg7 = 0 ;
  std::uint32_t arg8 ;
  std::uint32_t arg9 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg7_;
  arg1 = *(imebra::Transform **)&jarg1; 
  arg2 = *(imebra::Image **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::Image const & reference is null");
    return ;
  } 
  arg3 = (std::uint32_t)jarg3; 
  arg4 = (std::uint32_t)jarg4; 
  arg5 = (std::uint32_t)jarg5; 
  arg6 = (std::uint32_t)jarg6; 
  arg7 = *(imebra::Image **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::Image & reference is null");
    return ;
  } 
  arg8 = (std::uint32_t)jarg8; 
  arg9 = (std::uint32_t)jarg9; 
  {
    try {
      ((imebra::Transform const *)arg1)->runTransform((imebra::Image const &)*arg2,arg3,arg4,arg5,arg6,*arg7,arg8,arg9);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1TransformHighBit(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imebra::TransformHighBit *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::TransformHighBit *)new imebra::TransformHighBit();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::TransformHighBit **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1TransformHighBit(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::TransformHighBit *arg1 = (imebra::TransformHighBit *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::TransformHighBit **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1TransformsChain(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imebra::TransformsChain *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::TransformsChain *)new imebra::TransformsChain();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::TransformsChain **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1TransformsChain(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::TransformsChain *arg1 = (imebra::TransformsChain *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::TransformsChain **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_TransformsChain_1addTransform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  imebra::TransformsChain *arg1 = (imebra::TransformsChain *) 0 ;
  imebra::Transform *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::TransformsChain **)&jarg1; 
  arg2 = *(imebra::Transform **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::Transform const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->addTransform((imebra::Transform const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1ModalityVOILUT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::DataSet *arg1 = 0 ;
  imebra::ModalityVOILUT *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DataSet **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::DataSet const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::ModalityVOILUT *)new imebra::ModalityVOILUT((imebra::DataSet const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::ModalityVOILUT **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1ModalityVOILUT(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::ModalityVOILUT *arg1 = (imebra::ModalityVOILUT *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::ModalityVOILUT **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1VOILUT(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imebra::VOILUT *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::VOILUT *)new imebra::VOILUT();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::VOILUT **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1VOILUT(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::VOILUT *arg1 = (imebra::VOILUT *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::VOILUT **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_VOILUT_1applyOptimalVOI(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  imebra::VOILUT *arg1 = (imebra::VOILUT *) 0 ;
  imebra::Image *arg2 = 0 ;
  std::uint32_t arg3 ;
  std::uint32_t arg4 ;
  std::uint32_t arg5 ;
  std::uint32_t arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::VOILUT **)&jarg1; 
  arg2 = *(imebra::Image **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::Image const & reference is null");
    return ;
  } 
  arg3 = (std::uint32_t)jarg3; 
  arg4 = (std::uint32_t)jarg4; 
  arg5 = (std::uint32_t)jarg5; 
  arg6 = (std::uint32_t)jarg6; 
  {
    try {
      (arg1)->applyOptimalVOI((imebra::Image const &)*arg2,arg3,arg4,arg5,arg6);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_VOILUT_1setCenterWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  imebra::VOILUT *arg1 = (imebra::VOILUT *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::VOILUT **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->setCenterWidth(arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_VOILUT_1setLUT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  imebra::VOILUT *arg1 = (imebra::VOILUT *) 0 ;
  imebra::LUT *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::VOILUT **)&jarg1; 
  arg2 = *(imebra::LUT **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::LUT const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setLUT((imebra::LUT const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_com_imebra_imebraJNI_VOILUT_1getCenter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  imebra::VOILUT *arg1 = (imebra::VOILUT *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::VOILUT **)&jarg1; 
  {
    try {
      result = (double)((imebra::VOILUT const *)arg1)->getCenter();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_imebra_imebraJNI_VOILUT_1getWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  imebra::VOILUT *arg1 = (imebra::VOILUT *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::VOILUT **)&jarg1; 
  {
    try {
      result = (double)((imebra::VOILUT const *)arg1)->getWidth();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_ColorTransformsFactory_1normalizeColorSpace(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = imebra::ColorTransformsFactory::normalizeColorSpace((std::string const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_imebra_imebraJNI_ColorTransformsFactory_1isMonochrome(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (bool)imebra::ColorTransformsFactory::isMonochrome((std::string const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_imebra_imebraJNI_ColorTransformsFactory_1isSubsampledX(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (bool)imebra::ColorTransformsFactory::isSubsampledX((std::string const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_imebra_imebraJNI_ColorTransformsFactory_1isSubsampledY(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (bool)imebra::ColorTransformsFactory::isSubsampledY((std::string const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_imebra_imebraJNI_ColorTransformsFactory_1canSubsample(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (bool)imebra::ColorTransformsFactory::canSubsample((std::string const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_ColorTransformsFactory_1makeSubsampled(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2, jboolean jarg3) {
  jstring jresult = 0 ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  bool arg3 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      result = imebra::ColorTransformsFactory::makeSubsampled((std::string const &)*arg1,arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_ColorTransformsFactory_1getNumberOfChannels(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (std::uint32_t)imebra::ColorTransformsFactory::getNumberOfChannels((std::string const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_ColorTransformsFactory_1getTransform(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  imebra::Transform *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (imebra::Transform *)imebra::ColorTransformsFactory::getTransform((std::string const &)*arg1,(std::string const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::Transform **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1ColorTransformsFactory(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imebra::ColorTransformsFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::ColorTransformsFactory *)new imebra::ColorTransformsFactory();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::ColorTransformsFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1ColorTransformsFactory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::ColorTransformsFactory *arg1 = (imebra::ColorTransformsFactory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::ColorTransformsFactory **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1DicomDirEntry(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::DicomDirEntry *arg1 = (imebra::DicomDirEntry *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::DicomDirEntry **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DicomDirEntry_1getEntryDataSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::DicomDirEntry *arg1 = (imebra::DicomDirEntry *) 0 ;
  imebra::DataSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DicomDirEntry **)&jarg1; 
  {
    try {
      result = (imebra::DataSet *)(arg1)->getEntryDataSet();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::DataSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DicomDirEntry_1getNextEntry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::DicomDirEntry *arg1 = (imebra::DicomDirEntry *) 0 ;
  imebra::DicomDirEntry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DicomDirEntry **)&jarg1; 
  {
    try {
      result = (imebra::DicomDirEntry *)(arg1)->getNextEntry();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::DicomDirEntry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DicomDirEntry_1getFirstChildEntry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::DicomDirEntry *arg1 = (imebra::DicomDirEntry *) 0 ;
  imebra::DicomDirEntry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DicomDirEntry **)&jarg1; 
  {
    try {
      result = (imebra::DicomDirEntry *)(arg1)->getFirstChildEntry();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::DicomDirEntry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_DicomDirEntry_1setNextEntry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  imebra::DicomDirEntry *arg1 = (imebra::DicomDirEntry *) 0 ;
  imebra::DicomDirEntry *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DicomDirEntry **)&jarg1; 
  arg2 = *(imebra::DicomDirEntry **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::DicomDirEntry const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setNextEntry((imebra::DicomDirEntry const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_DicomDirEntry_1setFirstChildEntry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  imebra::DicomDirEntry *arg1 = (imebra::DicomDirEntry *) 0 ;
  imebra::DicomDirEntry *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DicomDirEntry **)&jarg1; 
  arg2 = *(imebra::DicomDirEntry **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::DicomDirEntry const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setFirstChildEntry((imebra::DicomDirEntry const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DicomDirEntry_1getFileParts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::DicomDirEntry *arg1 = (imebra::DicomDirEntry *) 0 ;
  imebra::fileParts_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DicomDirEntry **)&jarg1; 
  {
    try {
      result = ((imebra::DicomDirEntry const *)arg1)->getFileParts();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::fileParts_t **)&jresult = new imebra::fileParts_t((const imebra::fileParts_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_DicomDirEntry_1setFileParts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  imebra::DicomDirEntry *arg1 = (imebra::DicomDirEntry *) 0 ;
  imebra::fileParts_t *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DicomDirEntry **)&jarg1; 
  arg2 = *(imebra::fileParts_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::fileParts_t const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setFileParts((imebra::fileParts_t const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_DicomDirEntry_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imebra::DicomDirEntry *arg1 = (imebra::DicomDirEntry *) 0 ;
  imebra::directoryRecordType_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DicomDirEntry **)&jarg1; 
  {
    try {
      result = (imebra::directoryRecordType_t)((imebra::DicomDirEntry const *)arg1)->getType();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_DicomDirEntry_1getTypeString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imebra::DicomDirEntry *arg1 = (imebra::DicomDirEntry *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DicomDirEntry **)&jarg1; 
  {
    try {
      result = ((imebra::DicomDirEntry const *)arg1)->getTypeString();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1DicomDir_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imebra::DicomDir *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::DicomDir *)new imebra::DicomDir();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::DicomDir **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1DicomDir_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::DataSet *arg1 = 0 ;
  imebra::DicomDir *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DataSet **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::DataSet const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::DicomDir *)new imebra::DicomDir((imebra::DataSet const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::DicomDir **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1DicomDir(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::DicomDir *arg1 = (imebra::DicomDir *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::DicomDir **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DicomDir_1getNewEntry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  imebra::DicomDir *arg1 = (imebra::DicomDir *) 0 ;
  imebra::directoryRecordType_t arg2 ;
  imebra::DicomDirEntry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DicomDir **)&jarg1; 
  arg2 = (imebra::directoryRecordType_t)jarg2; 
  {
    try {
      result = (imebra::DicomDirEntry *)(arg1)->getNewEntry(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::DicomDirEntry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DicomDir_1getFirstRootEntry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::DicomDir *arg1 = (imebra::DicomDir *) 0 ;
  imebra::DicomDirEntry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DicomDir **)&jarg1; 
  {
    try {
      result = (imebra::DicomDirEntry *)((imebra::DicomDir const *)arg1)->getFirstRootEntry();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::DicomDirEntry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_DicomDir_1setFirstRootEntry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  imebra::DicomDir *arg1 = (imebra::DicomDir *) 0 ;
  imebra::DicomDirEntry *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DicomDir **)&jarg1; 
  arg2 = *(imebra::DicomDirEntry **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::DicomDirEntry const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setFirstRootEntry((imebra::DicomDirEntry const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DicomDir_1updateDataSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::DicomDir *arg1 = (imebra::DicomDir *) 0 ;
  imebra::DataSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DicomDir **)&jarg1; 
  {
    try {
      result = (imebra::DataSet *)(arg1)->updateDataSet();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::DataSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DicomDictionary_1getUnicodeTagName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::TagId *arg1 = 0 ;
  std::wstring result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::TagId **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  {
    try {
      result = imebra::DicomDictionary::getUnicodeTagName((imebra::TagId const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(std::wstring **)&jresult = new std::wstring((const std::wstring &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_DicomDictionary_1getTagName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imebra::TagId *arg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::TagId **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  {
    try {
      result = imebra::DicomDictionary::getTagName((imebra::TagId const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_DicomDictionary_1getTagType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imebra::TagId *arg1 = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::TagId **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::tagVR_t)imebra::DicomDictionary::getTagType((imebra::TagId const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DicomDictionary_1getWordSize(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  imebra::tagVR_t arg1 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (imebra::tagVR_t)jarg1; 
  {
    try {
      result = (std::uint32_t)imebra::DicomDictionary::getWordSize(arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DicomDictionary_1getMaxSize(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  imebra::tagVR_t arg1 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (imebra::tagVR_t)jarg1; 
  {
    try {
      result = (std::uint32_t)imebra::DicomDictionary::getMaxSize(arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1DicomDictionary(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imebra::DicomDictionary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::DicomDictionary *)new imebra::DicomDictionary();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::DicomDictionary **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1DicomDictionary(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::DicomDictionary *arg1 = (imebra::DicomDictionary *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::DicomDictionary **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1DrawBitmap_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imebra::DrawBitmap *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::DrawBitmap *)new imebra::DrawBitmap();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::DrawBitmap **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1DrawBitmap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::Transform *arg1 = 0 ;
  imebra::DrawBitmap *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Transform **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::Transform const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::DrawBitmap *)new imebra::DrawBitmap((imebra::Transform const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::DrawBitmap **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1DrawBitmap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::DrawBitmap *arg1 = (imebra::DrawBitmap *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::DrawBitmap **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DrawBitmap_1getBitmap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jbyteArray jarg5) {
  jlong jresult = 0 ;
  imebra::DrawBitmap *arg1 = (imebra::DrawBitmap *) 0 ;
  imebra::Image *arg2 = 0 ;
  imebra::drawBitmapType_t arg3 ;
  std::uint32_t arg4 ;
  char *arg5 = (char *) 0 ;
  size_t arg6 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DrawBitmap **)&jarg1; 
  arg2 = *(imebra::Image **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::Image const & reference is null");
    return 0;
  } 
  arg3 = (imebra::drawBitmapType_t)jarg3; 
  arg4 = (std::uint32_t)jarg4; 
  {
    if (jarg5) {
      arg5 = (char *) jenv->GetByteArrayElements(jarg5, 0);
      arg6 = (size_t) jenv->GetArrayLength(jarg5);
    } else {
      arg5 = 0;
      arg6 = 0;
    }
  }
  {
    try {
      result = (arg1)->getBitmap((imebra::Image const &)*arg2,arg3,arg4,arg5,arg6);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  {
    if (jarg5) jenv->ReleaseByteArrayElements(jarg5, (jbyte *)arg5, 0);
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DrawBitmap_1getBitmap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  imebra::DrawBitmap *arg1 = (imebra::DrawBitmap *) 0 ;
  imebra::Image *arg2 = 0 ;
  imebra::drawBitmapType_t arg3 ;
  std::uint32_t arg4 ;
  imebra::ReadWriteMemory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DrawBitmap **)&jarg1; 
  arg2 = *(imebra::Image **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::Image const & reference is null");
    return 0;
  } 
  arg3 = (imebra::drawBitmapType_t)jarg3; 
  arg4 = (std::uint32_t)jarg4; 
  {
    try {
      result = (imebra::ReadWriteMemory *)(arg1)->getBitmap((imebra::Image const &)*arg2,arg3,arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::ReadWriteMemory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1FileStreamInput(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  imebra::FileStreamInput *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (imebra::FileStreamInput *)new imebra::FileStreamInput((std::string const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::FileStreamInput **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1FileStreamInput(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::FileStreamInput *arg1 = (imebra::FileStreamInput *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::FileStreamInput **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1FileStreamOutput(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  imebra::FileStreamOutput *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (imebra::FileStreamOutput *)new imebra::FileStreamOutput((std::string const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::FileStreamOutput **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1FileStreamOutput(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::FileStreamOutput *arg1 = (imebra::FileStreamOutput *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::FileStreamOutput **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1MemoryStreamInput_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::ReadMemory *arg1 = 0 ;
  imebra::MemoryStreamInput *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::ReadMemory **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::ReadMemory const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::MemoryStreamInput *)new imebra::MemoryStreamInput((imebra::ReadMemory const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::MemoryStreamInput **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1MemoryStreamInput_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::ReadWriteMemory *arg1 = 0 ;
  imebra::MemoryStreamInput *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::ReadWriteMemory **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::ReadWriteMemory const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::MemoryStreamInput *)new imebra::MemoryStreamInput((imebra::ReadWriteMemory const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::MemoryStreamInput **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1MemoryStreamInput(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::MemoryStreamInput *arg1 = (imebra::MemoryStreamInput *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::MemoryStreamInput **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1MemoryStreamOutput(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::ReadWriteMemory *arg1 = 0 ;
  imebra::MemoryStreamOutput *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::ReadWriteMemory **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::ReadWriteMemory const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::MemoryStreamOutput *)new imebra::MemoryStreamOutput((imebra::ReadWriteMemory const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::MemoryStreamOutput **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1MemoryStreamOutput(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::MemoryStreamOutput *arg1 = (imebra::MemoryStreamOutput *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::MemoryStreamOutput **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1PresentationContext_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  imebra::PresentationContext *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (imebra::PresentationContext *)new imebra::PresentationContext((std::string const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::PresentationContext **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1PresentationContext_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  bool arg3 ;
  imebra::PresentationContext *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      result = (imebra::PresentationContext *)new imebra::PresentationContext((std::string const &)*arg1,arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::PresentationContext **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_PresentationContext_1addTransferSyntax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  imebra::PresentationContext *arg1 = (imebra::PresentationContext *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::PresentationContext **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->addTransferSyntax((std::string const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1PresentationContext(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::PresentationContext *arg1 = (imebra::PresentationContext *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::PresentationContext **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1PresentationContexts(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imebra::PresentationContexts *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::PresentationContexts *)new imebra::PresentationContexts();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::PresentationContexts **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1PresentationContexts(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::PresentationContexts *arg1 = (imebra::PresentationContexts *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::PresentationContexts **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_PresentationContexts_1addPresentationContext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  imebra::PresentationContexts *arg1 = (imebra::PresentationContexts *) 0 ;
  imebra::PresentationContext *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::PresentationContexts **)&jarg1; 
  arg2 = *(imebra::PresentationContext **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::PresentationContext const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->addPresentationContext((imebra::PresentationContext const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1AssociationMessage(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  imebra::AssociationMessage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (imebra::AssociationMessage *)new imebra::AssociationMessage((std::string const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::AssociationMessage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_AssociationMessage_1getAbstractSyntax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imebra::AssociationMessage *arg1 = (imebra::AssociationMessage *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::AssociationMessage **)&jarg1; 
  {
    try {
      result = ((imebra::AssociationMessage const *)arg1)->getAbstractSyntax();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_AssociationMessage_1getCommand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::AssociationMessage *arg1 = (imebra::AssociationMessage *) 0 ;
  imebra::DataSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::AssociationMessage **)&jarg1; 
  {
    try {
      result = (imebra::DataSet *)((imebra::AssociationMessage const *)arg1)->getCommand();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::DataSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_AssociationMessage_1getPayload(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::AssociationMessage *arg1 = (imebra::AssociationMessage *) 0 ;
  imebra::DataSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::AssociationMessage **)&jarg1; 
  {
    try {
      result = (imebra::DataSet *)((imebra::AssociationMessage const *)arg1)->getPayload();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::DataSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_imebra_imebraJNI_AssociationMessage_1hasPayload(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  imebra::AssociationMessage *arg1 = (imebra::AssociationMessage *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::AssociationMessage **)&jarg1; 
  {
    try {
      result = (bool)((imebra::AssociationMessage const *)arg1)->hasPayload();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_AssociationMessage_1addDataSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  imebra::AssociationMessage *arg1 = (imebra::AssociationMessage *) 0 ;
  imebra::DataSet *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::AssociationMessage **)&jarg1; 
  arg2 = *(imebra::DataSet **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::DataSet const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->addDataSet((imebra::DataSet const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1AssociationMessage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::AssociationMessage *arg1 = (imebra::AssociationMessage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::AssociationMessage **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1AssociationBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::AssociationBase *arg1 = (imebra::AssociationBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::AssociationBase **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_AssociationBase_1getCommand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::AssociationBase *arg1 = (imebra::AssociationBase *) 0 ;
  imebra::AssociationMessage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::AssociationBase **)&jarg1; 
  {
    try {
      result = (imebra::AssociationMessage *)(arg1)->getCommand();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::AssociationMessage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_AssociationBase_1getResponse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  imebra::AssociationBase *arg1 = (imebra::AssociationBase *) 0 ;
  std::uint16_t arg2 ;
  imebra::AssociationMessage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::AssociationBase **)&jarg1; 
  arg2 = (std::uint16_t)jarg2; 
  {
    try {
      result = (imebra::AssociationMessage *)(arg1)->getResponse(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::AssociationMessage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_AssociationBase_1sendMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  imebra::AssociationBase *arg1 = (imebra::AssociationBase *) 0 ;
  imebra::AssociationMessage *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::AssociationBase **)&jarg1; 
  arg2 = *(imebra::AssociationMessage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::AssociationMessage const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->sendMessage((imebra::AssociationMessage const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_AssociationBase_1release(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  imebra::AssociationBase *arg1 = (imebra::AssociationBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::AssociationBase **)&jarg1; 
  {
    try {
      (arg1)->release();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_AssociationBase_1abort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  imebra::AssociationBase *arg1 = (imebra::AssociationBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::AssociationBase **)&jarg1; 
  {
    try {
      (arg1)->abort();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_AssociationBase_1getThisAET(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imebra::AssociationBase *arg1 = (imebra::AssociationBase *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::AssociationBase **)&jarg1; 
  {
    try {
      result = ((imebra::AssociationBase const *)arg1)->getThisAET();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_AssociationBase_1getOtherAET(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imebra::AssociationBase *arg1 = (imebra::AssociationBase *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::AssociationBase **)&jarg1; 
  {
    try {
      result = ((imebra::AssociationBase const *)arg1)->getOtherAET();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_AssociationBase_1getTransferSyntax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  imebra::AssociationBase *arg1 = (imebra::AssociationBase *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::AssociationBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = ((imebra::AssociationBase const *)arg1)->getTransferSyntax((std::string const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1AssociationSCU(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_, jlong jarg8) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::uint32_t arg3 ;
  std::uint32_t arg4 ;
  imebra::PresentationContexts *arg5 = 0 ;
  imebra::StreamReader *arg6 = 0 ;
  imebra::StreamWriter *arg7 = 0 ;
  std::uint32_t arg8 ;
  imebra::AssociationSCU *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg5_;
  (void)jarg6_;
  (void)jarg7_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (std::uint32_t)jarg3; 
  arg4 = (std::uint32_t)jarg4; 
  arg5 = *(imebra::PresentationContexts **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::PresentationContexts const & reference is null");
    return 0;
  } 
  arg6 = *(imebra::StreamReader **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::StreamReader & reference is null");
    return 0;
  } 
  arg7 = *(imebra::StreamWriter **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::StreamWriter & reference is null");
    return 0;
  } 
  arg8 = (std::uint32_t)jarg8; 
  {
    try {
      result = (imebra::AssociationSCU *)new imebra::AssociationSCU((std::string const &)*arg1,(std::string const &)*arg2,arg3,arg4,(imebra::PresentationContexts const &)*arg5,*arg6,*arg7,arg8);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::AssociationSCU **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1AssociationSCU(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::AssociationSCU *arg1 = (imebra::AssociationSCU *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::AssociationSCU **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1AssociationSCP(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jlong jarg8) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::uint32_t arg2 ;
  std::uint32_t arg3 ;
  imebra::PresentationContexts *arg4 = 0 ;
  imebra::StreamReader *arg5 = 0 ;
  imebra::StreamWriter *arg6 = 0 ;
  std::uint32_t arg7 ;
  std::uint32_t arg8 ;
  imebra::AssociationSCP *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (std::uint32_t)jarg2; 
  arg3 = (std::uint32_t)jarg3; 
  arg4 = *(imebra::PresentationContexts **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::PresentationContexts const & reference is null");
    return 0;
  } 
  arg5 = *(imebra::StreamReader **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::StreamReader & reference is null");
    return 0;
  } 
  arg6 = *(imebra::StreamWriter **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::StreamWriter & reference is null");
    return 0;
  } 
  arg7 = (std::uint32_t)jarg7; 
  arg8 = (std::uint32_t)jarg8; 
  {
    try {
      result = (imebra::AssociationSCP *)new imebra::AssociationSCP((std::string const &)*arg1,arg2,arg3,(imebra::PresentationContexts const &)*arg4,*arg5,*arg6,arg7,arg8);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::AssociationSCP **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1AssociationSCP(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::AssociationSCP *arg1 = (imebra::AssociationSCP *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::AssociationSCP **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1DimseCommandBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::DimseCommandBase *arg1 = (imebra::DimseCommandBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::DimseCommandBase **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DimseCommandBase_1getCommandDataSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::DimseCommandBase *arg1 = (imebra::DimseCommandBase *) 0 ;
  imebra::DataSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DimseCommandBase **)&jarg1; 
  {
    try {
      result = (imebra::DataSet *)((imebra::DimseCommandBase const *)arg1)->getCommandDataSet();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::DataSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DimseCommandBase_1getPayloadDataSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::DimseCommandBase *arg1 = (imebra::DimseCommandBase *) 0 ;
  imebra::DataSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DimseCommandBase **)&jarg1; 
  {
    try {
      result = (imebra::DataSet *)((imebra::DimseCommandBase const *)arg1)->getPayloadDataSet();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::DataSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_DimseCommandBase_1getAbstractSyntax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imebra::DimseCommandBase *arg1 = (imebra::DimseCommandBase *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DimseCommandBase **)&jarg1; 
  {
    try {
      result = ((imebra::DimseCommandBase const *)arg1)->getAbstractSyntax();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_DimseCommandBase_1getAffectedSopInstanceUid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imebra::DimseCommandBase *arg1 = (imebra::DimseCommandBase *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DimseCommandBase **)&jarg1; 
  {
    try {
      result = ((imebra::DimseCommandBase const *)arg1)->getAffectedSopInstanceUid();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_DimseCommandBase_1getAffectedSopClassUid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imebra::DimseCommandBase *arg1 = (imebra::DimseCommandBase *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DimseCommandBase **)&jarg1; 
  {
    try {
      result = ((imebra::DimseCommandBase const *)arg1)->getAffectedSopClassUid();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_DimseCommandBase_1getRequestedSopInstanceUid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imebra::DimseCommandBase *arg1 = (imebra::DimseCommandBase *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DimseCommandBase **)&jarg1; 
  {
    try {
      result = ((imebra::DimseCommandBase const *)arg1)->getRequestedSopInstanceUid();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_DimseCommandBase_1getRequestedSopClassUid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imebra::DimseCommandBase *arg1 = (imebra::DimseCommandBase *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DimseCommandBase **)&jarg1; 
  {
    try {
      result = ((imebra::DimseCommandBase const *)arg1)->getRequestedSopClassUid();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_DimseCommand_1getID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imebra::DimseCommand *arg1 = (imebra::DimseCommand *) 0 ;
  std::uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DimseCommand **)&jarg1; 
  {
    try {
      result = (std::uint16_t)((imebra::DimseCommand const *)arg1)->getID();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_DimseCommand_1getCommandType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imebra::DimseCommand *arg1 = (imebra::DimseCommand *) 0 ;
  imebra::dimseCommandType_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DimseCommand **)&jarg1; 
  {
    try {
      result = (imebra::dimseCommandType_t)((imebra::DimseCommand const *)arg1)->getCommandType();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DimseCommand_1getAsCStoreCommand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::DimseCommand *arg1 = (imebra::DimseCommand *) 0 ;
  imebra::CStoreCommand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DimseCommand **)&jarg1; 
  {
    try {
      result = (imebra::CStoreCommand *)((imebra::DimseCommand const *)arg1)->getAsCStoreCommand();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::CStoreCommand **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DimseCommand_1getAsCMoveCommand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::DimseCommand *arg1 = (imebra::DimseCommand *) 0 ;
  imebra::CMoveCommand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DimseCommand **)&jarg1; 
  {
    try {
      result = (imebra::CMoveCommand *)((imebra::DimseCommand const *)arg1)->getAsCMoveCommand();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::CMoveCommand **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DimseCommand_1getAsCGetCommand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::DimseCommand *arg1 = (imebra::DimseCommand *) 0 ;
  imebra::CGetCommand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DimseCommand **)&jarg1; 
  {
    try {
      result = (imebra::CGetCommand *)((imebra::DimseCommand const *)arg1)->getAsCGetCommand();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::CGetCommand **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DimseCommand_1getAsCFindCommand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::DimseCommand *arg1 = (imebra::DimseCommand *) 0 ;
  imebra::CFindCommand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DimseCommand **)&jarg1; 
  {
    try {
      result = (imebra::CFindCommand *)((imebra::DimseCommand const *)arg1)->getAsCFindCommand();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::CFindCommand **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DimseCommand_1getAsCEchoCommand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::DimseCommand *arg1 = (imebra::DimseCommand *) 0 ;
  imebra::CEchoCommand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DimseCommand **)&jarg1; 
  {
    try {
      result = (imebra::CEchoCommand *)((imebra::DimseCommand const *)arg1)->getAsCEchoCommand();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::CEchoCommand **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DimseCommand_1getAsCCancelCommand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::DimseCommand *arg1 = (imebra::DimseCommand *) 0 ;
  imebra::CCancelCommand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DimseCommand **)&jarg1; 
  {
    try {
      result = (imebra::CCancelCommand *)((imebra::DimseCommand const *)arg1)->getAsCCancelCommand();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::CCancelCommand **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DimseCommand_1getAsNActionCommand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::DimseCommand *arg1 = (imebra::DimseCommand *) 0 ;
  imebra::NActionCommand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DimseCommand **)&jarg1; 
  {
    try {
      result = (imebra::NActionCommand *)((imebra::DimseCommand const *)arg1)->getAsNActionCommand();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NActionCommand **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DimseCommand_1getAsNEventReportCommand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::DimseCommand *arg1 = (imebra::DimseCommand *) 0 ;
  imebra::NEventReportCommand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DimseCommand **)&jarg1; 
  {
    try {
      result = (imebra::NEventReportCommand *)((imebra::DimseCommand const *)arg1)->getAsNEventReportCommand();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NEventReportCommand **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DimseCommand_1getAsNCreateCommand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::DimseCommand *arg1 = (imebra::DimseCommand *) 0 ;
  imebra::NCreateCommand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DimseCommand **)&jarg1; 
  {
    try {
      result = (imebra::NCreateCommand *)((imebra::DimseCommand const *)arg1)->getAsNCreateCommand();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NCreateCommand **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DimseCommand_1getAsNDeleteCommand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::DimseCommand *arg1 = (imebra::DimseCommand *) 0 ;
  imebra::NDeleteCommand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DimseCommand **)&jarg1; 
  {
    try {
      result = (imebra::NDeleteCommand *)((imebra::DimseCommand const *)arg1)->getAsNDeleteCommand();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NDeleteCommand **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DimseCommand_1getAsNSetCommand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::DimseCommand *arg1 = (imebra::DimseCommand *) 0 ;
  imebra::NSetCommand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DimseCommand **)&jarg1; 
  {
    try {
      result = (imebra::NSetCommand *)((imebra::DimseCommand const *)arg1)->getAsNSetCommand();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NSetCommand **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DimseCommand_1getAsNGetCommand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::DimseCommand *arg1 = (imebra::DimseCommand *) 0 ;
  imebra::NGetCommand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DimseCommand **)&jarg1; 
  {
    try {
      result = (imebra::NGetCommand *)((imebra::DimseCommand const *)arg1)->getAsNGetCommand();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NGetCommand **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1DimseCommand(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::DimseCommand *arg1 = (imebra::DimseCommand *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::DimseCommand **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_DimseResponse_1getStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imebra::DimseResponse *arg1 = (imebra::DimseResponse *) 0 ;
  imebra::dimseStatus_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DimseResponse **)&jarg1; 
  {
    try {
      result = (imebra::dimseStatus_t)((imebra::DimseResponse const *)arg1)->getStatus();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_DimseResponse_1getStatusCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imebra::DimseResponse *arg1 = (imebra::DimseResponse *) 0 ;
  std::uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DimseResponse **)&jarg1; 
  {
    try {
      result = (std::uint16_t)((imebra::DimseResponse const *)arg1)->getStatusCode();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1DimseResponse(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::DimseResponse *arg1 = (imebra::DimseResponse *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::DimseResponse **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_CPartialResponse_1getRemainingSubOperations(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::CPartialResponse *arg1 = (imebra::CPartialResponse *) 0 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::CPartialResponse **)&jarg1; 
  {
    try {
      result = (std::uint32_t)((imebra::CPartialResponse const *)arg1)->getRemainingSubOperations();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_CPartialResponse_1getCompletedSubOperations(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::CPartialResponse *arg1 = (imebra::CPartialResponse *) 0 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::CPartialResponse **)&jarg1; 
  {
    try {
      result = (std::uint32_t)((imebra::CPartialResponse const *)arg1)->getCompletedSubOperations();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_CPartialResponse_1getFailedSubOperations(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::CPartialResponse *arg1 = (imebra::CPartialResponse *) 0 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::CPartialResponse **)&jarg1; 
  {
    try {
      result = (std::uint32_t)((imebra::CPartialResponse const *)arg1)->getFailedSubOperations();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_CPartialResponse_1getWarningSubOperations(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::CPartialResponse *arg1 = (imebra::CPartialResponse *) 0 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::CPartialResponse **)&jarg1; 
  {
    try {
      result = (std::uint32_t)((imebra::CPartialResponse const *)arg1)->getWarningSubOperations();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1CPartialResponse(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::CPartialResponse *arg1 = (imebra::CPartialResponse *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::CPartialResponse **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1CStoreCommand(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jint jarg3, jstring jarg4, jstring jarg5, jstring jarg6, jint jarg7, jlong jarg8, jobject jarg8_) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::uint16_t arg2 ;
  imebra::dimseCommandPriority_t arg3 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::uint16_t arg7 ;
  imebra::DataSet *arg8 = 0 ;
  imebra::CStoreCommand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg8_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (std::uint16_t)jarg2; 
  arg3 = (imebra::dimseCommandPriority_t)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  if(!jarg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg6_pstr = (const char *)jenv->GetStringUTFChars(jarg6, 0); 
  if (!arg6_pstr) return 0;
  std::string arg6_str(arg6_pstr);
  arg6 = &arg6_str;
  jenv->ReleaseStringUTFChars(jarg6, arg6_pstr); 
  arg7 = (std::uint16_t)jarg7; 
  arg8 = *(imebra::DataSet **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::DataSet const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::CStoreCommand *)new imebra::CStoreCommand((std::string const &)*arg1,arg2,arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,arg7,(imebra::DataSet const &)*arg8);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::CStoreCommand **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_CStoreCommand_1getOriginatorAET(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imebra::CStoreCommand *arg1 = (imebra::CStoreCommand *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::CStoreCommand **)&jarg1; 
  {
    try {
      result = ((imebra::CStoreCommand const *)arg1)->getOriginatorAET();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_CStoreCommand_1getOriginatorMessageID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imebra::CStoreCommand *arg1 = (imebra::CStoreCommand *) 0 ;
  std::uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::CStoreCommand **)&jarg1; 
  {
    try {
      result = (std::uint16_t)((imebra::CStoreCommand const *)arg1)->getOriginatorMessageID();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1CStoreCommand(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::CStoreCommand *arg1 = (imebra::CStoreCommand *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::CStoreCommand **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1CStoreResponse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  imebra::CStoreCommand *arg1 = 0 ;
  imebra::dimseStatusCode_t arg2 ;
  imebra::CStoreResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::CStoreCommand **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::CStoreCommand const & reference is null");
    return 0;
  } 
  arg2 = (imebra::dimseStatusCode_t)jarg2; 
  {
    try {
      result = (imebra::CStoreResponse *)new imebra::CStoreResponse((imebra::CStoreCommand const &)*arg1,arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::CStoreResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1CStoreResponse(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::CStoreResponse *arg1 = (imebra::CStoreResponse *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::CStoreResponse **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1CGetCommand(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jint jarg3, jstring jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::uint16_t arg2 ;
  imebra::dimseCommandPriority_t arg3 ;
  std::string *arg4 = 0 ;
  imebra::DataSet *arg5 = 0 ;
  imebra::CGetCommand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg5_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (std::uint16_t)jarg2; 
  arg3 = (imebra::dimseCommandPriority_t)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = *(imebra::DataSet **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::DataSet const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::CGetCommand *)new imebra::CGetCommand((std::string const &)*arg1,arg2,arg3,(std::string const &)*arg4,(imebra::DataSet const &)*arg5);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::CGetCommand **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1CGetCommand(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::CGetCommand *arg1 = (imebra::CGetCommand *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::CGetCommand **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1CGetResponse_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7, jobject jarg7_) {
  jlong jresult = 0 ;
  imebra::CGetCommand *arg1 = 0 ;
  imebra::dimseStatusCode_t arg2 ;
  std::uint32_t arg3 ;
  std::uint32_t arg4 ;
  std::uint32_t arg5 ;
  std::uint32_t arg6 ;
  imebra::DataSet *arg7 = 0 ;
  imebra::CGetResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg7_;
  arg1 = *(imebra::CGetCommand **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::CGetCommand const & reference is null");
    return 0;
  } 
  arg2 = (imebra::dimseStatusCode_t)jarg2; 
  arg3 = (std::uint32_t)jarg3; 
  arg4 = (std::uint32_t)jarg4; 
  arg5 = (std::uint32_t)jarg5; 
  arg6 = (std::uint32_t)jarg6; 
  arg7 = *(imebra::DataSet **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::DataSet const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::CGetResponse *)new imebra::CGetResponse((imebra::CGetCommand const &)*arg1,arg2,arg3,arg4,arg5,arg6,(imebra::DataSet const &)*arg7);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::CGetResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1CGetResponse_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jlong jresult = 0 ;
  imebra::CGetCommand *arg1 = 0 ;
  imebra::dimseStatusCode_t arg2 ;
  std::uint32_t arg3 ;
  std::uint32_t arg4 ;
  std::uint32_t arg5 ;
  std::uint32_t arg6 ;
  imebra::CGetResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::CGetCommand **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::CGetCommand const & reference is null");
    return 0;
  } 
  arg2 = (imebra::dimseStatusCode_t)jarg2; 
  arg3 = (std::uint32_t)jarg3; 
  arg4 = (std::uint32_t)jarg4; 
  arg5 = (std::uint32_t)jarg5; 
  arg6 = (std::uint32_t)jarg6; 
  {
    try {
      result = (imebra::CGetResponse *)new imebra::CGetResponse((imebra::CGetCommand const &)*arg1,arg2,arg3,arg4,arg5,arg6);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::CGetResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1CGetResponse(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::CGetResponse *arg1 = (imebra::CGetResponse *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::CGetResponse **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1CFindCommand(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jint jarg3, jstring jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::uint16_t arg2 ;
  imebra::dimseCommandPriority_t arg3 ;
  std::string *arg4 = 0 ;
  imebra::DataSet *arg5 = 0 ;
  imebra::CFindCommand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg5_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (std::uint16_t)jarg2; 
  arg3 = (imebra::dimseCommandPriority_t)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = *(imebra::DataSet **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::DataSet const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::CFindCommand *)new imebra::CFindCommand((std::string const &)*arg1,arg2,arg3,(std::string const &)*arg4,(imebra::DataSet const &)*arg5);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::CFindCommand **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1CFindCommand(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::CFindCommand *arg1 = (imebra::CFindCommand *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::CFindCommand **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1CFindResponse_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  imebra::CFindCommand *arg1 = 0 ;
  imebra::DataSet *arg2 = 0 ;
  imebra::CFindResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::CFindCommand **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::CFindCommand const & reference is null");
    return 0;
  } 
  arg2 = *(imebra::DataSet **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::DataSet const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::CFindResponse *)new imebra::CFindResponse((imebra::CFindCommand const &)*arg1,(imebra::DataSet const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::CFindResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1CFindResponse_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  imebra::CFindCommand *arg1 = 0 ;
  imebra::dimseStatusCode_t arg2 ;
  imebra::CFindResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::CFindCommand **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::CFindCommand const & reference is null");
    return 0;
  } 
  arg2 = (imebra::dimseStatusCode_t)jarg2; 
  {
    try {
      result = (imebra::CFindResponse *)new imebra::CFindResponse((imebra::CFindCommand const &)*arg1,arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::CFindResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1CFindResponse(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::CFindResponse *arg1 = (imebra::CFindResponse *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::CFindResponse **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1CMoveCommand_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jint jarg3, jstring jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::uint16_t arg2 ;
  imebra::dimseCommandPriority_t arg3 ;
  std::string *arg4 = 0 ;
  imebra::DataSet *arg5 = 0 ;
  imebra::CMoveCommand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg5_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (std::uint16_t)jarg2; 
  arg3 = (imebra::dimseCommandPriority_t)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = *(imebra::DataSet **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::DataSet const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::CMoveCommand *)new imebra::CMoveCommand((std::string const &)*arg1,arg2,arg3,(std::string const &)*arg4,(imebra::DataSet const &)*arg5);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::CMoveCommand **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1CMoveCommand_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jint jarg3, jstring jarg4, jstring jarg5, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::uint16_t arg2 ;
  imebra::dimseCommandPriority_t arg3 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  imebra::DataSet *arg6 = 0 ;
  imebra::CMoveCommand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg6_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (std::uint16_t)jarg2; 
  arg3 = (imebra::dimseCommandPriority_t)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  arg6 = *(imebra::DataSet **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::DataSet const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::CMoveCommand *)new imebra::CMoveCommand((std::string const &)*arg1,arg2,arg3,(std::string const &)*arg4,(std::string const &)*arg5,(imebra::DataSet const &)*arg6);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::CMoveCommand **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_CMoveCommand_1getDestinationAET(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imebra::CMoveCommand *arg1 = (imebra::CMoveCommand *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::CMoveCommand **)&jarg1; 
  {
    try {
      result = ((imebra::CMoveCommand const *)arg1)->getDestinationAET();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1CMoveCommand(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::CMoveCommand *arg1 = (imebra::CMoveCommand *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::CMoveCommand **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1CMoveResponse_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7, jobject jarg7_) {
  jlong jresult = 0 ;
  imebra::CMoveCommand *arg1 = 0 ;
  imebra::dimseStatusCode_t arg2 ;
  std::uint32_t arg3 ;
  std::uint32_t arg4 ;
  std::uint32_t arg5 ;
  std::uint32_t arg6 ;
  imebra::DataSet *arg7 = 0 ;
  imebra::CMoveResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg7_;
  arg1 = *(imebra::CMoveCommand **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::CMoveCommand const & reference is null");
    return 0;
  } 
  arg2 = (imebra::dimseStatusCode_t)jarg2; 
  arg3 = (std::uint32_t)jarg3; 
  arg4 = (std::uint32_t)jarg4; 
  arg5 = (std::uint32_t)jarg5; 
  arg6 = (std::uint32_t)jarg6; 
  arg7 = *(imebra::DataSet **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::DataSet const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::CMoveResponse *)new imebra::CMoveResponse((imebra::CMoveCommand const &)*arg1,arg2,arg3,arg4,arg5,arg6,(imebra::DataSet const &)*arg7);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::CMoveResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1CMoveResponse_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jlong jresult = 0 ;
  imebra::CMoveCommand *arg1 = 0 ;
  imebra::dimseStatusCode_t arg2 ;
  std::uint32_t arg3 ;
  std::uint32_t arg4 ;
  std::uint32_t arg5 ;
  std::uint32_t arg6 ;
  imebra::CMoveResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::CMoveCommand **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::CMoveCommand const & reference is null");
    return 0;
  } 
  arg2 = (imebra::dimseStatusCode_t)jarg2; 
  arg3 = (std::uint32_t)jarg3; 
  arg4 = (std::uint32_t)jarg4; 
  arg5 = (std::uint32_t)jarg5; 
  arg6 = (std::uint32_t)jarg6; 
  {
    try {
      result = (imebra::CMoveResponse *)new imebra::CMoveResponse((imebra::CMoveCommand const &)*arg1,arg2,arg3,arg4,arg5,arg6);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::CMoveResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1CMoveResponse(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::CMoveResponse *arg1 = (imebra::CMoveResponse *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::CMoveResponse **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1CEchoCommand(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jint jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::uint16_t arg2 ;
  imebra::dimseCommandPriority_t arg3 ;
  std::string *arg4 = 0 ;
  imebra::CEchoCommand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (std::uint16_t)jarg2; 
  arg3 = (imebra::dimseCommandPriority_t)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  {
    try {
      result = (imebra::CEchoCommand *)new imebra::CEchoCommand((std::string const &)*arg1,arg2,arg3,(std::string const &)*arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::CEchoCommand **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1CEchoCommand(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::CEchoCommand *arg1 = (imebra::CEchoCommand *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::CEchoCommand **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1CEchoResponse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  imebra::CEchoCommand *arg1 = 0 ;
  imebra::dimseStatusCode_t arg2 ;
  imebra::CEchoResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::CEchoCommand **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::CEchoCommand const & reference is null");
    return 0;
  } 
  arg2 = (imebra::dimseStatusCode_t)jarg2; 
  {
    try {
      result = (imebra::CEchoResponse *)new imebra::CEchoResponse((imebra::CEchoCommand const &)*arg1,arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::CEchoResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1CEchoResponse(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::CEchoResponse *arg1 = (imebra::CEchoResponse *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::CEchoResponse **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1CCancelCommand(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::uint16_t arg2 ;
  imebra::dimseCommandPriority_t arg3 ;
  std::uint16_t arg4 ;
  imebra::CCancelCommand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (std::uint16_t)jarg2; 
  arg3 = (imebra::dimseCommandPriority_t)jarg3; 
  arg4 = (std::uint16_t)jarg4; 
  {
    try {
      result = (imebra::CCancelCommand *)new imebra::CCancelCommand((std::string const &)*arg1,arg2,arg3,arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::CCancelCommand **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_CCancelCommand_1getCancelMessageID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imebra::CCancelCommand *arg1 = (imebra::CCancelCommand *) 0 ;
  std::uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::CCancelCommand **)&jarg1; 
  {
    try {
      result = (std::uint16_t)((imebra::CCancelCommand const *)arg1)->getCancelMessageID();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1CCancelCommand(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::CCancelCommand *arg1 = (imebra::CCancelCommand *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::CCancelCommand **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1NEventReportCommand_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jstring jarg3, jstring jarg4, jint jarg5) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::uint16_t arg2 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::uint16_t arg5 ;
  imebra::NEventReportCommand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (std::uint16_t)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (std::uint16_t)jarg5; 
  {
    try {
      result = (imebra::NEventReportCommand *)new imebra::NEventReportCommand((std::string const &)*arg1,arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NEventReportCommand **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1NEventReportCommand_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jstring jarg3, jstring jarg4, jint jarg5, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::uint16_t arg2 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::uint16_t arg5 ;
  imebra::DataSet *arg6 = 0 ;
  imebra::NEventReportCommand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg6_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (std::uint16_t)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (std::uint16_t)jarg5; 
  arg6 = *(imebra::DataSet **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::DataSet const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::NEventReportCommand *)new imebra::NEventReportCommand((std::string const &)*arg1,arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5,(imebra::DataSet const &)*arg6);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NEventReportCommand **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_NEventReportCommand_1getEventID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imebra::NEventReportCommand *arg1 = (imebra::NEventReportCommand *) 0 ;
  std::uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::NEventReportCommand **)&jarg1; 
  {
    try {
      result = (std::uint16_t)((imebra::NEventReportCommand const *)arg1)->getEventID();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1NEventReportCommand(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::NEventReportCommand *arg1 = (imebra::NEventReportCommand *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::NEventReportCommand **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1NEventReportResponse_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  imebra::NEventReportCommand *arg1 = 0 ;
  imebra::DataSet *arg2 = 0 ;
  imebra::NEventReportResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::NEventReportCommand **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::NEventReportCommand const & reference is null");
    return 0;
  } 
  arg2 = *(imebra::DataSet **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::DataSet const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::NEventReportResponse *)new imebra::NEventReportResponse((imebra::NEventReportCommand const &)*arg1,(imebra::DataSet const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NEventReportResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1NEventReportResponse_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  imebra::NEventReportCommand *arg1 = 0 ;
  imebra::dimseStatusCode_t arg2 ;
  imebra::NEventReportResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::NEventReportCommand **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::NEventReportCommand const & reference is null");
    return 0;
  } 
  arg2 = (imebra::dimseStatusCode_t)jarg2; 
  {
    try {
      result = (imebra::NEventReportResponse *)new imebra::NEventReportResponse((imebra::NEventReportCommand const &)*arg1,arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NEventReportResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_NEventReportResponse_1getEventID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imebra::NEventReportResponse *arg1 = (imebra::NEventReportResponse *) 0 ;
  std::uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::NEventReportResponse **)&jarg1; 
  {
    try {
      result = (std::uint16_t)((imebra::NEventReportResponse const *)arg1)->getEventID();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1NEventReportResponse(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::NEventReportResponse *arg1 = (imebra::NEventReportResponse *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::NEventReportResponse **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1NGetCommand(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jstring jarg3, jstring jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::uint16_t arg2 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  imebra::attributeIdentifierList_t *arg5 = 0 ;
  imebra::NGetCommand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (std::uint16_t)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = *(imebra::attributeIdentifierList_t **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::attributeIdentifierList_t const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::NGetCommand *)new imebra::NGetCommand((std::string const &)*arg1,arg2,(std::string const &)*arg3,(std::string const &)*arg4,(imebra::attributeIdentifierList_t const &)*arg5);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NGetCommand **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_NGetCommand_1getAttributeList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::NGetCommand *arg1 = (imebra::NGetCommand *) 0 ;
  SwigValueWrapper< std::vector< unsigned int > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::NGetCommand **)&jarg1; 
  {
    try {
      result = ((imebra::NGetCommand const *)arg1)->getAttributeList();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::attributeIdentifierList_t **)&jresult = new imebra::attributeIdentifierList_t((const imebra::attributeIdentifierList_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1NGetCommand(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::NGetCommand *arg1 = (imebra::NGetCommand *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::NGetCommand **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1NGetResponse_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  imebra::NGetCommand *arg1 = 0 ;
  imebra::dimseStatusCode_t arg2 ;
  imebra::DataSet *arg3 = 0 ;
  imebra::NGetResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(imebra::NGetCommand **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::NGetCommand const & reference is null");
    return 0;
  } 
  arg2 = (imebra::dimseStatusCode_t)jarg2; 
  arg3 = *(imebra::DataSet **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::DataSet const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::NGetResponse *)new imebra::NGetResponse((imebra::NGetCommand const &)*arg1,arg2,(imebra::DataSet const &)*arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NGetResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1NGetResponse_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  imebra::NGetCommand *arg1 = 0 ;
  imebra::dimseStatusCode_t arg2 ;
  imebra::NGetResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::NGetCommand **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::NGetCommand const & reference is null");
    return 0;
  } 
  arg2 = (imebra::dimseStatusCode_t)jarg2; 
  {
    try {
      result = (imebra::NGetResponse *)new imebra::NGetResponse((imebra::NGetCommand const &)*arg1,arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NGetResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1NGetResponse(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::NGetResponse *arg1 = (imebra::NGetResponse *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::NGetResponse **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1NSetCommand(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jstring jarg3, jstring jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::uint16_t arg2 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  imebra::DataSet *arg5 = 0 ;
  imebra::NSetCommand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg5_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (std::uint16_t)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = *(imebra::DataSet **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::DataSet const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::NSetCommand *)new imebra::NSetCommand((std::string const &)*arg1,arg2,(std::string const &)*arg3,(std::string const &)*arg4,(imebra::DataSet const &)*arg5);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NSetCommand **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1NSetCommand(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::NSetCommand *arg1 = (imebra::NSetCommand *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::NSetCommand **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1NSetResponse_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  imebra::NSetCommand *arg1 = 0 ;
  SwigValueWrapper< std::vector< unsigned int > > arg2 ;
  imebra::attributeIdentifierList_t *argp2 ;
  imebra::NSetResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::NSetCommand **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::NSetCommand const & reference is null");
    return 0;
  } 
  argp2 = *(imebra::attributeIdentifierList_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null imebra::attributeIdentifierList_t");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (imebra::NSetResponse *)new imebra::NSetResponse((imebra::NSetCommand const &)*arg1,arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NSetResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1NSetResponse_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  imebra::NSetCommand *arg1 = 0 ;
  imebra::dimseStatusCode_t arg2 ;
  imebra::NSetResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::NSetCommand **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::NSetCommand const & reference is null");
    return 0;
  } 
  arg2 = (imebra::dimseStatusCode_t)jarg2; 
  {
    try {
      result = (imebra::NSetResponse *)new imebra::NSetResponse((imebra::NSetCommand const &)*arg1,arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NSetResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_NSetResponse_1getModifiedAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::NSetResponse *arg1 = (imebra::NSetResponse *) 0 ;
  SwigValueWrapper< std::vector< unsigned int > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::NSetResponse **)&jarg1; 
  {
    try {
      result = ((imebra::NSetResponse const *)arg1)->getModifiedAttributes();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::attributeIdentifierList_t **)&jresult = new imebra::attributeIdentifierList_t((const imebra::attributeIdentifierList_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1NSetResponse(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::NSetResponse *arg1 = (imebra::NSetResponse *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::NSetResponse **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1NActionCommand_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jstring jarg3, jstring jarg4, jint jarg5, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::uint16_t arg2 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::uint16_t arg5 ;
  imebra::DataSet *arg6 = 0 ;
  imebra::NActionCommand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg6_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (std::uint16_t)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (std::uint16_t)jarg5; 
  arg6 = *(imebra::DataSet **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::DataSet const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::NActionCommand *)new imebra::NActionCommand((std::string const &)*arg1,arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5,(imebra::DataSet const &)*arg6);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NActionCommand **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1NActionCommand_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jstring jarg3, jstring jarg4, jint jarg5) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::uint16_t arg2 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::uint16_t arg5 ;
  imebra::NActionCommand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (std::uint16_t)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (std::uint16_t)jarg5; 
  {
    try {
      result = (imebra::NActionCommand *)new imebra::NActionCommand((std::string const &)*arg1,arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NActionCommand **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_NActionCommand_1getActionID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imebra::NActionCommand *arg1 = (imebra::NActionCommand *) 0 ;
  std::uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::NActionCommand **)&jarg1; 
  {
    try {
      result = (std::uint16_t)((imebra::NActionCommand const *)arg1)->getActionID();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1NActionCommand(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::NActionCommand *arg1 = (imebra::NActionCommand *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::NActionCommand **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1NActionResponse_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  imebra::NActionCommand *arg1 = 0 ;
  imebra::DataSet *arg2 = 0 ;
  imebra::NActionResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::NActionCommand **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::NActionCommand const & reference is null");
    return 0;
  } 
  arg2 = *(imebra::DataSet **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::DataSet const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::NActionResponse *)new imebra::NActionResponse((imebra::NActionCommand const &)*arg1,(imebra::DataSet const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NActionResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1NActionResponse_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  imebra::NActionCommand *arg1 = 0 ;
  imebra::dimseStatusCode_t arg2 ;
  imebra::NActionResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::NActionCommand **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::NActionCommand const & reference is null");
    return 0;
  } 
  arg2 = (imebra::dimseStatusCode_t)jarg2; 
  {
    try {
      result = (imebra::NActionResponse *)new imebra::NActionResponse((imebra::NActionCommand const &)*arg1,arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NActionResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_NActionResponse_1getActionID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imebra::NActionResponse *arg1 = (imebra::NActionResponse *) 0 ;
  std::uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::NActionResponse **)&jarg1; 
  {
    try {
      result = (std::uint16_t)((imebra::NActionResponse const *)arg1)->getActionID();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1NActionResponse(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::NActionResponse *arg1 = (imebra::NActionResponse *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::NActionResponse **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1NCreateCommand_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jstring jarg3, jstring jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::uint16_t arg2 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  imebra::DataSet *arg5 = 0 ;
  imebra::NCreateCommand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg5_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (std::uint16_t)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = *(imebra::DataSet **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::DataSet const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::NCreateCommand *)new imebra::NCreateCommand((std::string const &)*arg1,arg2,(std::string const &)*arg3,(std::string const &)*arg4,(imebra::DataSet const &)*arg5);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NCreateCommand **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1NCreateCommand_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jstring jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::uint16_t arg2 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  imebra::NCreateCommand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (std::uint16_t)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  {
    try {
      result = (imebra::NCreateCommand *)new imebra::NCreateCommand((std::string const &)*arg1,arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NCreateCommand **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1NCreateCommand(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::NCreateCommand *arg1 = (imebra::NCreateCommand *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::NCreateCommand **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1NCreateResponse_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  imebra::NCreateCommand *arg1 = 0 ;
  imebra::DataSet *arg2 = 0 ;
  imebra::NCreateResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::NCreateCommand **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::NCreateCommand const & reference is null");
    return 0;
  } 
  arg2 = *(imebra::DataSet **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::DataSet const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::NCreateResponse *)new imebra::NCreateResponse((imebra::NCreateCommand const &)*arg1,(imebra::DataSet const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NCreateResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1NCreateResponse_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  imebra::NCreateCommand *arg1 = 0 ;
  std::string *arg2 = 0 ;
  imebra::DataSet *arg3 = 0 ;
  imebra::NCreateResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(imebra::NCreateCommand **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::NCreateCommand const & reference is null");
    return 0;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(imebra::DataSet **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::DataSet const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::NCreateResponse *)new imebra::NCreateResponse((imebra::NCreateCommand const &)*arg1,(std::string const &)*arg2,(imebra::DataSet const &)*arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NCreateResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1NCreateResponse_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  imebra::NCreateCommand *arg1 = 0 ;
  imebra::dimseStatusCode_t arg2 ;
  imebra::NCreateResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::NCreateCommand **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::NCreateCommand const & reference is null");
    return 0;
  } 
  arg2 = (imebra::dimseStatusCode_t)jarg2; 
  {
    try {
      result = (imebra::NCreateResponse *)new imebra::NCreateResponse((imebra::NCreateCommand const &)*arg1,arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NCreateResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1NCreateResponse_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  imebra::NCreateCommand *arg1 = 0 ;
  std::string *arg2 = 0 ;
  imebra::NCreateResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::NCreateCommand **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::NCreateCommand const & reference is null");
    return 0;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (imebra::NCreateResponse *)new imebra::NCreateResponse((imebra::NCreateCommand const &)*arg1,(std::string const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NCreateResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1NCreateResponse(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::NCreateResponse *arg1 = (imebra::NCreateResponse *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::NCreateResponse **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1NDeleteCommand(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jstring jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::uint16_t arg2 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  imebra::NDeleteCommand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (std::uint16_t)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  {
    try {
      result = (imebra::NDeleteCommand *)new imebra::NDeleteCommand((std::string const &)*arg1,arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NDeleteCommand **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1NDeleteCommand(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::NDeleteCommand *arg1 = (imebra::NDeleteCommand *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::NDeleteCommand **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1NDeleteResponse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  imebra::NDeleteCommand *arg1 = 0 ;
  imebra::dimseStatusCode_t arg2 ;
  imebra::NDeleteResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::NDeleteCommand **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::NDeleteCommand & reference is null");
    return 0;
  } 
  arg2 = (imebra::dimseStatusCode_t)jarg2; 
  {
    try {
      result = (imebra::NDeleteResponse *)new imebra::NDeleteResponse(*arg1,arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NDeleteResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1NDeleteResponse(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::NDeleteResponse *arg1 = (imebra::NDeleteResponse *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::NDeleteResponse **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1DimseService(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::AssociationBase *arg1 = 0 ;
  imebra::DimseService *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::AssociationBase **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::AssociationBase & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::DimseService *)new imebra::DimseService(*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::DimseService **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_DimseService_1getTransferSyntax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  imebra::DimseService *arg1 = (imebra::DimseService *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DimseService **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = ((imebra::DimseService const *)arg1)->getTransferSyntax((std::string const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_DimseService_1getNextCommandID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imebra::DimseService *arg1 = (imebra::DimseService *) 0 ;
  std::uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DimseService **)&jarg1; 
  {
    try {
      result = (std::uint16_t)(arg1)->getNextCommandID();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_com_imebra_imebraJNI_DimseService_1getCommand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  imebra::DimseService *arg1 = (imebra::DimseService *) 0 ;
  imebra::DimseCommand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DimseService **)&jarg1; 
  {
    try {
      result = (imebra::DimseCommand *)(arg1)->getCommand();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  {
    imebra::CStoreCommand* pStore = dynamic_cast<imebra::CStoreCommand*>(result);
    imebra::CMoveCommand* pMove = dynamic_cast<imebra::CMoveCommand*>(result);
    imebra::CGetCommand* pGet = dynamic_cast<imebra::CGetCommand*>(result);
    
    /*@SWIG:/opt/atlassian/pipelines/agent/build/ant-build/wrappers/swig.i,124,downcastDimseCommand@*/
    
    {
      imebra::CStoreCommand* pDowncast = dynamic_cast<imebra::CStoreCommand*>(result);
      if(pDowncast != 0)
      {
        jclass clazz = jenv->FindClass("com/imebra/CStoreCommand");
        if (clazz) {
          jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(JZ)V");
          if (mid) {
            jlong cptr = 0;
            *(imebra::CStoreCommand **)& cptr = pDowncast;
            jresult = jenv->NewObject(clazz, mid, cptr, 1);
          }
        }
      }
    }
    
    /*@SWIG@*/;
    /*@SWIG:/opt/atlassian/pipelines/agent/build/ant-build/wrappers/swig.i,124,downcastDimseCommand@*/
    
    {
      imebra::CMoveCommand* pDowncast = dynamic_cast<imebra::CMoveCommand*>(result);
      if(pDowncast != 0)
      {
        jclass clazz = jenv->FindClass("com/imebra/CMoveCommand");
        if (clazz) {
          jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(JZ)V");
          if (mid) {
            jlong cptr = 0;
            *(imebra::CMoveCommand **)& cptr = pDowncast;
            jresult = jenv->NewObject(clazz, mid, cptr, 1);
          }
        }
      }
    }
    
    /*@SWIG@*/;
    /*@SWIG:/opt/atlassian/pipelines/agent/build/ant-build/wrappers/swig.i,124,downcastDimseCommand@*/
    
    {
      imebra::CGetCommand* pDowncast = dynamic_cast<imebra::CGetCommand*>(result);
      if(pDowncast != 0)
      {
        jclass clazz = jenv->FindClass("com/imebra/CGetCommand");
        if (clazz) {
          jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(JZ)V");
          if (mid) {
            jlong cptr = 0;
            *(imebra::CGetCommand **)& cptr = pDowncast;
            jresult = jenv->NewObject(clazz, mid, cptr, 1);
          }
        }
      }
    }
    
    /*@SWIG@*/;
    /*@SWIG:/opt/atlassian/pipelines/agent/build/ant-build/wrappers/swig.i,124,downcastDimseCommand@*/
    
    {
      imebra::CFindCommand* pDowncast = dynamic_cast<imebra::CFindCommand*>(result);
      if(pDowncast != 0)
      {
        jclass clazz = jenv->FindClass("com/imebra/CFindCommand");
        if (clazz) {
          jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(JZ)V");
          if (mid) {
            jlong cptr = 0;
            *(imebra::CFindCommand **)& cptr = pDowncast;
            jresult = jenv->NewObject(clazz, mid, cptr, 1);
          }
        }
      }
    }
    
    /*@SWIG@*/;
    /*@SWIG:/opt/atlassian/pipelines/agent/build/ant-build/wrappers/swig.i,124,downcastDimseCommand@*/
    
    {
      imebra::CEchoCommand* pDowncast = dynamic_cast<imebra::CEchoCommand*>(result);
      if(pDowncast != 0)
      {
        jclass clazz = jenv->FindClass("com/imebra/CEchoCommand");
        if (clazz) {
          jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(JZ)V");
          if (mid) {
            jlong cptr = 0;
            *(imebra::CEchoCommand **)& cptr = pDowncast;
            jresult = jenv->NewObject(clazz, mid, cptr, 1);
          }
        }
      }
    }
    
    /*@SWIG@*/;
    /*@SWIG:/opt/atlassian/pipelines/agent/build/ant-build/wrappers/swig.i,124,downcastDimseCommand@*/
    
    {
      imebra::CCancelCommand* pDowncast = dynamic_cast<imebra::CCancelCommand*>(result);
      if(pDowncast != 0)
      {
        jclass clazz = jenv->FindClass("com/imebra/CCancelCommand");
        if (clazz) {
          jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(JZ)V");
          if (mid) {
            jlong cptr = 0;
            *(imebra::CCancelCommand **)& cptr = pDowncast;
            jresult = jenv->NewObject(clazz, mid, cptr, 1);
          }
        }
      }
    }
    
    /*@SWIG@*/;
    /*@SWIG:/opt/atlassian/pipelines/agent/build/ant-build/wrappers/swig.i,124,downcastDimseCommand@*/
    
    {
      imebra::NActionCommand* pDowncast = dynamic_cast<imebra::NActionCommand*>(result);
      if(pDowncast != 0)
      {
        jclass clazz = jenv->FindClass("com/imebra/NActionCommand");
        if (clazz) {
          jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(JZ)V");
          if (mid) {
            jlong cptr = 0;
            *(imebra::NActionCommand **)& cptr = pDowncast;
            jresult = jenv->NewObject(clazz, mid, cptr, 1);
          }
        }
      }
    }
    
    /*@SWIG@*/;
    /*@SWIG:/opt/atlassian/pipelines/agent/build/ant-build/wrappers/swig.i,124,downcastDimseCommand@*/
    
    {
      imebra::NEventReportCommand* pDowncast = dynamic_cast<imebra::NEventReportCommand*>(result);
      if(pDowncast != 0)
      {
        jclass clazz = jenv->FindClass("com/imebra/NEventReportCommand");
        if (clazz) {
          jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(JZ)V");
          if (mid) {
            jlong cptr = 0;
            *(imebra::NEventReportCommand **)& cptr = pDowncast;
            jresult = jenv->NewObject(clazz, mid, cptr, 1);
          }
        }
      }
    }
    
    /*@SWIG@*/;
    /*@SWIG:/opt/atlassian/pipelines/agent/build/ant-build/wrappers/swig.i,124,downcastDimseCommand@*/
    
    {
      imebra::NCreateCommand* pDowncast = dynamic_cast<imebra::NCreateCommand*>(result);
      if(pDowncast != 0)
      {
        jclass clazz = jenv->FindClass("com/imebra/NCreateCommand");
        if (clazz) {
          jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(JZ)V");
          if (mid) {
            jlong cptr = 0;
            *(imebra::NCreateCommand **)& cptr = pDowncast;
            jresult = jenv->NewObject(clazz, mid, cptr, 1);
          }
        }
      }
    }
    
    /*@SWIG@*/;
    /*@SWIG:/opt/atlassian/pipelines/agent/build/ant-build/wrappers/swig.i,124,downcastDimseCommand@*/
    
    {
      imebra::NDeleteCommand* pDowncast = dynamic_cast<imebra::NDeleteCommand*>(result);
      if(pDowncast != 0)
      {
        jclass clazz = jenv->FindClass("com/imebra/NDeleteCommand");
        if (clazz) {
          jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(JZ)V");
          if (mid) {
            jlong cptr = 0;
            *(imebra::NDeleteCommand **)& cptr = pDowncast;
            jresult = jenv->NewObject(clazz, mid, cptr, 1);
          }
        }
      }
    }
    
    /*@SWIG@*/;
    /*@SWIG:/opt/atlassian/pipelines/agent/build/ant-build/wrappers/swig.i,124,downcastDimseCommand@*/
    
    {
      imebra::NSetCommand* pDowncast = dynamic_cast<imebra::NSetCommand*>(result);
      if(pDowncast != 0)
      {
        jclass clazz = jenv->FindClass("com/imebra/NSetCommand");
        if (clazz) {
          jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(JZ)V");
          if (mid) {
            jlong cptr = 0;
            *(imebra::NSetCommand **)& cptr = pDowncast;
            jresult = jenv->NewObject(clazz, mid, cptr, 1);
          }
        }
      }
    }
    
    /*@SWIG@*/;
    /*@SWIG:/opt/atlassian/pipelines/agent/build/ant-build/wrappers/swig.i,124,downcastDimseCommand@*/
    
    {
      imebra::NGetCommand* pDowncast = dynamic_cast<imebra::NGetCommand*>(result);
      if(pDowncast != 0)
      {
        jclass clazz = jenv->FindClass("com/imebra/NGetCommand");
        if (clazz) {
          jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(JZ)V");
          if (mid) {
            jlong cptr = 0;
            *(imebra::NGetCommand **)& cptr = pDowncast;
            jresult = jenv->NewObject(clazz, mid, cptr, 1);
          }
        }
      }
    }
    
    /*@SWIG@*/;
    
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_DimseService_1sendCommandOrResponse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  imebra::DimseService *arg1 = (imebra::DimseService *) 0 ;
  imebra::DimseCommandBase *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DimseService **)&jarg1; 
  arg2 = *(imebra::DimseCommandBase **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::DimseCommandBase const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->sendCommandOrResponse((imebra::DimseCommandBase const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DimseService_1getCStoreResponse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  imebra::DimseService *arg1 = (imebra::DimseService *) 0 ;
  imebra::CStoreCommand *arg2 = 0 ;
  imebra::CStoreResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DimseService **)&jarg1; 
  arg2 = *(imebra::CStoreCommand **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::CStoreCommand const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::CStoreResponse *)(arg1)->getCStoreResponse((imebra::CStoreCommand const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::CStoreResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DimseService_1getCGetResponse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  imebra::DimseService *arg1 = (imebra::DimseService *) 0 ;
  imebra::CGetCommand *arg2 = 0 ;
  imebra::CGetResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DimseService **)&jarg1; 
  arg2 = *(imebra::CGetCommand **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::CGetCommand const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::CGetResponse *)(arg1)->getCGetResponse((imebra::CGetCommand const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::CGetResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DimseService_1getCFindResponse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  imebra::DimseService *arg1 = (imebra::DimseService *) 0 ;
  imebra::CFindCommand *arg2 = 0 ;
  imebra::CFindResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DimseService **)&jarg1; 
  arg2 = *(imebra::CFindCommand **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::CFindCommand const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::CFindResponse *)(arg1)->getCFindResponse((imebra::CFindCommand const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::CFindResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DimseService_1getCMoveResponse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  imebra::DimseService *arg1 = (imebra::DimseService *) 0 ;
  imebra::CMoveCommand *arg2 = 0 ;
  imebra::CMoveResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DimseService **)&jarg1; 
  arg2 = *(imebra::CMoveCommand **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::CMoveCommand const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::CMoveResponse *)(arg1)->getCMoveResponse((imebra::CMoveCommand const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::CMoveResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DimseService_1getCEchoResponse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  imebra::DimseService *arg1 = (imebra::DimseService *) 0 ;
  imebra::CEchoCommand *arg2 = 0 ;
  imebra::CEchoResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DimseService **)&jarg1; 
  arg2 = *(imebra::CEchoCommand **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::CEchoCommand const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::CEchoResponse *)(arg1)->getCEchoResponse((imebra::CEchoCommand const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::CEchoResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DimseService_1getNEventReportResponse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  imebra::DimseService *arg1 = (imebra::DimseService *) 0 ;
  imebra::NEventReportCommand *arg2 = 0 ;
  imebra::NEventReportResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DimseService **)&jarg1; 
  arg2 = *(imebra::NEventReportCommand **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::NEventReportCommand const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::NEventReportResponse *)(arg1)->getNEventReportResponse((imebra::NEventReportCommand const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NEventReportResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DimseService_1getNGetResponse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  imebra::DimseService *arg1 = (imebra::DimseService *) 0 ;
  imebra::NGetCommand *arg2 = 0 ;
  imebra::NGetResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DimseService **)&jarg1; 
  arg2 = *(imebra::NGetCommand **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::NGetCommand const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::NGetResponse *)(arg1)->getNGetResponse((imebra::NGetCommand const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NGetResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DimseService_1getNSetResponse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  imebra::DimseService *arg1 = (imebra::DimseService *) 0 ;
  imebra::NSetCommand *arg2 = 0 ;
  imebra::NSetResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DimseService **)&jarg1; 
  arg2 = *(imebra::NSetCommand **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::NSetCommand const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::NSetResponse *)(arg1)->getNSetResponse((imebra::NSetCommand const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NSetResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DimseService_1getNActionResponse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  imebra::DimseService *arg1 = (imebra::DimseService *) 0 ;
  imebra::NActionCommand *arg2 = 0 ;
  imebra::NActionResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DimseService **)&jarg1; 
  arg2 = *(imebra::NActionCommand **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::NActionCommand const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::NActionResponse *)(arg1)->getNActionResponse((imebra::NActionCommand const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NActionResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DimseService_1getNCreateResponse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  imebra::DimseService *arg1 = (imebra::DimseService *) 0 ;
  imebra::NCreateCommand *arg2 = 0 ;
  imebra::NCreateResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DimseService **)&jarg1; 
  arg2 = *(imebra::NCreateCommand **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::NCreateCommand const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::NCreateResponse *)(arg1)->getNCreateResponse((imebra::NCreateCommand const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NCreateResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DimseService_1getNDeleteResponse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  imebra::DimseService *arg1 = (imebra::DimseService *) 0 ;
  imebra::NDeleteCommand *arg2 = 0 ;
  imebra::NDeleteResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DimseService **)&jarg1; 
  arg2 = *(imebra::NDeleteCommand **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::NDeleteCommand const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::NDeleteResponse *)(arg1)->getNDeleteResponse((imebra::NDeleteCommand const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NDeleteResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1DimseService(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::DimseService *arg1 = (imebra::DimseService *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::DimseService **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::HuffmanError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_ReadWriteMemory_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::ReadMemory **)&baseptr = *(imebra::ReadWriteMemory **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_ReadingDataHandlerNumeric_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::ReadingDataHandler **)&baseptr = *(imebra::ReadingDataHandlerNumeric **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_WritingDataHandlerNumeric_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::WritingDataHandler **)&baseptr = *(imebra::WritingDataHandlerNumeric **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_TCPActiveAddress_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::TCPAddress **)&baseptr = *(imebra::TCPActiveAddress **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_TCPPassiveAddress_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::TCPAddress **)&baseptr = *(imebra::TCPPassiveAddress **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_TCPStream_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::BaseStreamInput **)&baseptr = *(imebra::TCPStream **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_Pipe_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::BaseStreamInput **)&baseptr = *(imebra::Pipe **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_TransformHighBit_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::Transform **)&baseptr = *(imebra::TransformHighBit **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_TransformsChain_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::Transform **)&baseptr = *(imebra::TransformsChain **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_ModalityVOILUT_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::Transform **)&baseptr = *(imebra::ModalityVOILUT **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_VOILUT_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::Transform **)&baseptr = *(imebra::VOILUT **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_FileStreamInput_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::BaseStreamInput **)&baseptr = *(imebra::FileStreamInput **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_FileStreamOutput_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::BaseStreamOutput **)&baseptr = *(imebra::FileStreamOutput **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_MemoryStreamInput_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::BaseStreamInput **)&baseptr = *(imebra::MemoryStreamInput **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_MemoryStreamOutput_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::BaseStreamOutput **)&baseptr = *(imebra::MemoryStreamOutput **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_AssociationSCU_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::AssociationBase **)&baseptr = *(imebra::AssociationSCU **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_AssociationSCP_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::AssociationBase **)&baseptr = *(imebra::AssociationSCP **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DimseCommand_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::DimseCommandBase **)&baseptr = *(imebra::DimseCommand **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DimseResponse_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::DimseCommandBase **)&baseptr = *(imebra::DimseResponse **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_CPartialResponse_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::DimseResponse **)&baseptr = *(imebra::CPartialResponse **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_CStoreCommand_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::DimseCommand **)&baseptr = *(imebra::CStoreCommand **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_CStoreResponse_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::DimseResponse **)&baseptr = *(imebra::CStoreResponse **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_CGetCommand_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::DimseCommand **)&baseptr = *(imebra::CGetCommand **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_CGetResponse_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::CPartialResponse **)&baseptr = *(imebra::CGetResponse **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_CFindCommand_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::DimseCommand **)&baseptr = *(imebra::CFindCommand **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_CFindResponse_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::DimseResponse **)&baseptr = *(imebra::CFindResponse **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_CMoveCommand_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::DimseCommand **)&baseptr = *(imebra::CMoveCommand **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_CMoveResponse_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::CPartialResponse **)&baseptr = *(imebra::CMoveResponse **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_CEchoCommand_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::DimseCommand **)&baseptr = *(imebra::CEchoCommand **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_CEchoResponse_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::DimseResponse **)&baseptr = *(imebra::CEchoResponse **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_CCancelCommand_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::DimseCommand **)&baseptr = *(imebra::CCancelCommand **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_NEventReportCommand_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::DimseCommand **)&baseptr = *(imebra::NEventReportCommand **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_NEventReportResponse_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::DimseResponse **)&baseptr = *(imebra::NEventReportResponse **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_NGetCommand_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::DimseCommand **)&baseptr = *(imebra::NGetCommand **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_NGetResponse_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::DimseResponse **)&baseptr = *(imebra::NGetResponse **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_NSetCommand_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::DimseCommand **)&baseptr = *(imebra::NSetCommand **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_NSetResponse_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::DimseResponse **)&baseptr = *(imebra::NSetResponse **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_NActionCommand_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::DimseCommand **)&baseptr = *(imebra::NActionCommand **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_NActionResponse_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::DimseResponse **)&baseptr = *(imebra::NActionResponse **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_NCreateCommand_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::DimseCommand **)&baseptr = *(imebra::NCreateCommand **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_NCreateResponse_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::DimseResponse **)&baseptr = *(imebra::NCreateResponse **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_NDeleteCommand_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::DimseCommand **)&baseptr = *(imebra::NDeleteCommand **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_NDeleteResponse_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::DimseResponse **)&baseptr = *(imebra::NDeleteResponse **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

